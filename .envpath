
# locale settings

# shellinfo=$(echo $0)
# if grep -q "zsh" <<< "$shellinfo"; then
# 	export HISTORY_IGNORE="(fg|ll|lea|history)"
# elif grep -q "bash" <<< "$shellinfo"; then
# 	export HISTIGNORE="fg:ll:ls:lea:$HISTIGNORE"
# fi




# if wrong LC_ALL, change empty set
if [ -n "$LC_ALL" ]; then
	if [ -z "$(locale -a 2>/dev/null | grep '${LC_ALL}')" ]; then
		unset LC_ALL
	fi
fi

if [[ "$(uname -s)" = "Darwin" ]]; then

	if [ -d /opt/homebrew ]; then
		if ! grep -q "/opt/homebrew/bin" <<< "$PATH"; then
			export PATH=/opt/homebrew/bin:$PATH
		fi
		if ! grep -q "/opt/homebrew/sbin" <<< "$PATH"; then
			export PATH=/opt/homebrew/sbin:$PATH
		fi
	fi

	if [ -d $HOME/.dotfiles/bin/ ]; then
		if ! grep -q "$HOME/.dotfiles/bin" <<< "$PATH"; then
			export PATH=$HOME/.dotfiles/bin:$PATH
		fi
	fi

	if [ -n "$(locale -a 2>/dev/null | grep 'ko_KR.UTF-8')" ]; then
		export LC_ALL=ko_KR.UTF-8
		export LANG=ko_KR.UTF-8
	elif [ -n "$(locale -a 2>/dev/null | grep 'ko_KR.utf8')" ]; then
		export LC_ALL=ko_KR.utf8
		export LANG=ko_KR.utf8
	fi
fi


# custom binary / script
if [ -d "$HOME/.local/bin/" ]; then
	if ! grep -q "$HOME/.local/bin" <<< "$PATH"; then
		export PATH="$HOME/.local/bin:$PATH"
	fi
fi

if [ -d "$HOME/.local/.bin/" ]; then
	if ! grep -q "$HOME/.local/.bin" <<< "$PATH"; then
		export PATH="$HOME/.local/.bin:$PATH"
	fi
fi



# java path
# if [ -n "$(command -v java)" ]; then
# 	java --version >/dev/null 2>&1
# fi
# if [ $? -eq 0 ]; then
if [ -n "$(command -v java)" ]; then
	if [[ "$(uname -s)" = "Darwin" ]]; then
		export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"
		if [ -z "$JAVA_HOME" ]; then
			export JAVA_HOME="$(/usr/libexec/java_home -v17)"
			# export JAVA_HOME="/opt/homebrew/opt/openjdk@17"
		fi
	else
		# custom java home path
		if [ -z "$JAVA_HOME" ]; then
			export JAVA_HOME=""
			# export JAVA_HOME="/usr/lib/jvm/java-xx-openjdk-axx64"
		fi
	fi
fi

# go path
if [ -n "$(command -v go)" ]; then
	goversion=$(go version | awk -F ' ' '{ print $3 }' | sed 's/^go//')
	if [ -d "/opt/homebrew/Cellar/go/${goversion}/libexec" ]; then
		export GOROOT="/opt/homebrew/Cellar/go/${goversion}/libexec"
	fi
	unset goversion
fi

# rust path
if [ -d "$HOME/.cargo/bin" ]; then
	if ! grep -q "$HOME/.cargo/bin" <<< "$PATH"; then
		export PATH="$HOME/.cargo/bin:$PATH"
	fi
fi


# Added by Windsurf
if [ -d "$HOME/.codeium/windsurf/bin" ]; then
	if ! grep -q "$HOME/.codeium/windsurf/bin" <<< "$PATH"; then
		export PATH="$HOME/.codeium/windsurf/bin:$PATH"
	fi
fi




# if homebrew exist
if [ -d "/opt/homebrew/" ] && [[ "$(uname -s)" = "Darwin" ]]; then

openssl_brew_version=3
if ! grep -q "/opt/homebrew/opt/openssl@$openssl_brew_version/lib" <<< "$LIBRARY_PATH"; then
	if [ "$LIBRARY_PATH" = "" ]; then
		export LIBRARY_PATH=/opt/homebrew/opt/openssl@$openssl_brew_version/lib
	else
		export LIBRARY_PATH=$LIBRARY_PATH:/opt/homebrew/opt/openssl@$openssl_brew_version/lib
	fi
fi

homebrew_bin_list=(
	"openssl@$openssl_brew_version"
	"curl"
	"libnet"
	"libpq"
	"unzip"
	"llvm"
	"ruby@3.2"
)

for homebrew_bin in ${homebrew_bin_list[@]}; do
	if ! grep -q "/opt/homebrew/opt/$homebrew_bin/bin" <<< "$PATH"; then
		export PATH="/opt/homebrew/opt/$homebrew_bin/bin:$PATH"
	fi
done

if [ -n "$(command -v unzip)" ]; then
	export UNZIP="-O cp949"
	export ZIPINFO="-O cp949"
fi

if [ -z "$NVM_DIR" ]; then
	export NVM_DIR="$HOME/.nvm"
	if [ -d "$NVM_DIR" ]; then
	# [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
	if [ -n "$(command -v brew)" ]; then
		source $(brew --prefix nvm)/nvm.sh
	else
		source /opt/homebrew/opt/nvm/nvm.sh
	fi
	if grep -q "bash" <<< "$(ps -p $$ -o 'comm=')"; then
		[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion
	fi
	fi
fi


gnubin_list=(
	"grep"
	"gnu-sed"
	"coreutils"
	"findutils"
	"gnu-tar"
)

for gnu_path in ${gnubin_list[@]}; do
	if grep -q "/opt/homebrew/opt/$gnu_path/libexec/gnubin" <<< "$PATH"; then
		# remove old path
		export PATH=$(echo "$PATH" | sed "s/\/opt\/homebrew\/opt\/$gnu_path\/libexec\/gnubin://")
	fi
	# create new path
	export PATH="/opt/homebrew/opt/$gnu_path/libexec/gnubin:$PATH"
done

fi

if [ -d "/Applications/IntelliJ IDEA.app" ]; then
	export PATH="$PATH:/Applications/IntelliJ IDEA.app/Contents/MacOS"
fi



unset openssl_brew_version
unset gnubin_list


# link homebrew
# brew unlink <pkg>; brew link <pkg> --force
# cd /opt/homebrew/bin/
# ln -s ../Cellar/<pkg>/<version>/<path>/<binary> <binary>
# ln -s ../Cellar/arping/2.23/sbin/arping arpin
is_zsh=$( echo "$SHELL" | grep "zsh$" )
if [[ -n "$is_zsh" ]] && [[ "$(command -v typeset)" != "" ]]; then
	# ignore scm tracking - specific path
	p10k_gitscm_track_ignore_path=(
		# "*/export_dir"
	)
	if (( ${#p10k_gitscm_track_ignore_path[@]} )); then
		scm_ignore_path="("
		for scm_path in ${p10k_gitscm_track_ignore_path[@]}; do
			scm_ignore_path="${scm_ignore_path}${scm_path}|"
		done
		scm_ignore_path="${scm_ignore_path%?})"
		typeset -g POWERLEVEL9K_VCS_DISABLED_DIR_PATTERN="${scm_ignore_path}(|/*)"
		unset scm_ignore_path
		unset scm_path
	fi
	unset p10k_gitscm_track_ignore_path
fi
unset is_zsh


if [[ "$(uname -s)" = "Darwin" ]]; then
	if [ -d "/opt/homebrew/opt/llvm/" ]; then
		if [ -d "/opt/homebrew/opt/llvm/lib" ]; then
			if [ -z "${LDFLAGS}" ]; then
				export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
			else
				LDFLAGS="${LDFLAGS} -L/opt/homebrew/opt/llvm/lib"
			fi
		fi
		if [ -d "/opt/homebrew/opt/llvm/include" ]; then
			if [ -z "${CPPFLAGS}" ]; then
				export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
			else
				CPPFLAGS="${CPPFLAGS} -I/opt/homebrew/opt/llvm/include"
			fi
		fi
	fi
fi
