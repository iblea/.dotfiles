// 키 바인딩을 이 파일에 넣어서 기본값 재정의
// vscode
[
    {
        // remove key
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        // "key": "ctrl+cmd+p",
        // file quick open
        "key": "cmd+p",
        "command": "workbench.action.quickOpen"
    },
    {
        // open file command
        "key": "shift+cmd+p",
        "command": "workbench.action.files.openFile",
    },
    {
        // ctrl+p -> remap quickOpen -> ctrl+p vim command
        "key": "ctrl+p",
        // "command": "-workbench.action.quickOpen"
        "command": "extension.vim_ctrl+p"
    },
    {
        // command palette
        // "key": "cmd+p",
        "key": "ctrl+cmd+p",
        "command": "workbench.action.showCommands"
    },
    {
        // remove common shortcut
        "key": "shift+cmd+d",
        "command": "-extension.downloadSettings"
    },
    {
        // remove common shortcut
        "key": "shift+cmd+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        // 사용자 정의 tasks
        "key": "shift+cmd+d shift+cmd+oem_7",
        "command": "workbench.action.tasks.openUserTasks"
    },
    {
        // 사용자 정의 snipeet (매크로)
        "key": "shift+cmd+d shift+cmd+backspace",
        "command": "workbench.action.openSnippets"
    },
    {
        // 사용자 정의 키바인딩 (json)
        "key": "shift+cmd+d shift+cmd+enter",
        "command": "workbench.action.openGlobalKeybindingsFile"
    },
    {
        // 사용자 정의 세팅
        "key": "shift+cmd+d shift+cmd+/",
        "command": "workbench.action.openSettingsJson"
    },
    {
        // 사용자 정의 workspace
        "key": "ctrl+cmd+d ctrl+cmd+oem_2",
        // "command": "workbench.action.openSettingsJson"
        "command": "workbench.action.openWorkspaceSettingsFile"
    },
    {
        // 사용자 정의 키바인딩
        "key": "shift+cmd+d shift+cmd+\\",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        // 마지막으로 활동했(포커스되었)던 에디터 그룹으로 이동
        "key": "ctrl+oem_1",
        "command": "workbench.action.focusActiveEditorGroup",
    },
    {
        // Developer: Toggle Developer Tools
        "key": "ctrl+shift+cmd+oem_period",
        "command": "workbench.action.toggleDevTools",
        // "when": "isDevelopment"
    },
    {
        // Developer: Inspect Context Keys
        "key": "ctrl+shift+cmd+oem_comma",
        "command": "workbench.action.inspectContextKeys"
    },



    // if you want to know when timing (variable)
    // Developer: Inspect Context Keys
    // Developer: Toggle Developer Tools
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusActiveEditorGroup",
                // "workbench.action.decreaseViewSize"
                // "workbench.action.increaseViewSize"

        // "command": "extension.multiCommand.execute",
        // "args": {
        //     "sequence": [
        //         "workbench.action.decreaseViewSize",
        //         "workbench.action.decreaseViewSize",
        //         "workbench.action.decreaseViewSize",
        //         "workbench.action.decreaseViewSize",
        //         "workbench.action.focusActiveEditorGroup"
        //     ],
        // },
        // "when": "(!editorFocus) || (editorFocus && panelVisible)"
        // "when": "!editorFocus"
        // "when": "panelFocus"
    },
    {
        "key": "ctrl+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.toggleMaximizedPanel",
                "workbench.action.alignPanelRight",
                "workbench.action.focusActiveEditorGroup",
            ],
            "interval": 30
        },
        "when": "panelFocus && panelMaximized"
    },
    {
        "key": "ctrl+l",
        // "command": "workbench.action.focusPanel",
        // "command": "extension.multiCommand.execute",
        // "args": {
        //     "sequence": [
        //         "workbench.action.focusPanel",
        //         "workbench.action.focusActiveEditorGroup",
        //         // "outline.followCursor",
        //         "editor.action.focusPreviousCursor",
        //         "editor.action.focusNextCursor",
        //         "workbench.action.focusPanel",
        //     ],
        // },
        // "command": "workbench.action.terminal.focus",
        "command": "terminal.focus",
        // "command": "workbench.action.focusPanel",
        // "command": "workbench.action.terminal.toggleTerminal",
        // "command": "extension.multiCommand.execute",
        // "args": {
        //     "sequence": [
        //         "terminal.focus",
        //         "workbench.action.increaseViewSize",
        //         "workbench.action.increaseViewSize",
        //         "workbench.action.increaseViewSize",
        //         "workbench.action.increaseViewSize",
        //     ],
        // },
        // "when": "vim.active && vim.mode == 'Normal' && !terminalFocus"
        "when": "!terminalFocus"
        // "when": "!panelFocus && !terminalFocus"
    },
    {
        "key": "ctrl+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.focusPanel",
                "terminal.focus",
            ],
        },
        "when": "terminalFocus && !panelFocus && terminalEditorFocus"
    },
    // {
    //     "key": "ctrl+l",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "terminal.focus",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.focusActiveEditorGroup",
    //             "extension.vim_escape",
    //             // "cursorHome",
    //             "terminal.focus"
    //         ],
    //     },
    //     "when": "editorFocus && !panelFocus && !sideBarFocus"
    // },
    // {
    //     "key": "ctrl+l",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "terminal.focus",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.increaseViewSize",
    //             "workbench.action.focusActiveEditorGroup",
    //             "extension.vim_escape",
    //             // "cursorHome",
    //             "terminal.focus"
    //         ],
    //     },
    //     "when": "editorTextFocus && !panelVisible && vim.active && vim.mode == 'Normal'"
    // },
    // {
    //     "key": "ctrl+l",
    //     "command": "workbench.action.closePanel",
    //     "when": "panelFocus && terminalFocus"
    // }
    // {
    //     //AuxiliaryBar Terminal Focus Editor (ctrl + l)
    //     "key": "ctrl+l",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     // "when": "panelFocus && !panelMaximized"
    //     "when": "!editorTextFocus && !panelMaximized"
    //     // "when": "panelFocus && terminalFindFocused && terminalProcessSupported || panelFocus && terminalFocus && terminalProcessSupported"
    // },
    {
        "key": "ctrl+l",
        "command": "extension.vim_navigateCtrlL",
        "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl && vim.mode != 'Normal' && vim.mode != 'Visual'"
    },
    {
        // Terminal Focus Default Setting
        "key": "ctrl+cmd+l",
        "command": "terminal.focus",
        // "command": "workbench.action.terminal.toggleTerminal"
        // "command": "workbench.action.terminal.focus",
    },
    {
        "key": "ctrl+cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "terminal.focus",
                // "workbench.action.increaseViewSize",
                // "workbench.action.increaseViewSize",
                // "workbench.action.increaseViewSize",
                // "workbench.action.increaseViewSize",
                "workbench.action.focusActiveEditorGroup",
                "extension.vim_escape",
                // "cursorHome",
                "terminal.focus"
            ],
            // "interval": 100
        },
        // "when": "editorTextFocus && !panelVisible && vim.active && vim.mode == 'Normal'"
        "when": "editorTextFocus && !panelVisible && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.focusPanel",
                "terminal.focus"
            ],
        },
        "when": "terminalFocus && !panelFocus && terminalEditorFocus"
    },
    {
        //AuxiliaryBar Terminal toggle Terminal (ctrl + cmd + l)
        "key": "ctrl+cmd+l",
        // "command": "workbench.action.terminal.toggleTerminal",
        "command": "extension.multiCommand.execute",
        "args": {
            // sidebar
            // "sequence": [
            //     "workbench.action.closeSidebar",
            //     "workbench.action.focusActiveEditorGroup",
            // ]
            // panel
            "sequence": [
                "workbench.action.terminal.toggleTerminal",
                "workbench.action.focusActiveEditorGroup",
            ]
        },
        // "when": "panelFocus && terminalFindFocused && terminalProcessSupported || panelFocus && terminalFocus && terminalProcessSupported"
        "when": "terminalFindFocused && terminalProcessSupported && !terminalEditorFocus|| terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+shift+cmd+l",
        "command": "workbench.action.terminal.openNativeConsole"
    },
    {
        "key": "ctrl+shift+l",
        "command": "sftp.openConnectInTerminal",
        "args": {
            "config": "sftp",
            "name": "sftp"
        }
    },
    {
        "key": "shift+cmd+c",
        "command": "workbench.action.terminal.copyLastCommandOutput",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+c",
        "command": "-editor.action.clipboardCopyAction",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+oem_period",
        "command": "-editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "extension.vim_ctrl+space",
        "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl"
    },
    {
        "key": "ctrl+space",
        "command": "-extension.vim_ctrl+space",
        "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+cmd+e",
        "command": "workbench.action.terminal.new",
        // "command": "workbench.action.terminal.newWithCwd",
        // "args": {
        //     "cwd": "${fileDirname}"
        // },
        "when": "terminalProcessSupported"
    },
    // {
    //     "key": "ctrl+shift+cmd+e",
    //     "command": "sftp.openConnectInTerminal",
    //     "args": {
    //         "config": "sftp",
    //         "name": "sftp"
    //     }
    // },
    {
        "key": "ctrl+shift+cmd+e",
        "command": "workbench.action.terminal.newWithCwd",
        "args": {
            "cwd": "${fileDirname}"
        }
    },
    {
        "key": "shift+cmd+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+cmd+n",
        "command": "workbench.view.explorer",
        // "command": "workbench.files.action.focusFilesExplorer"
        // "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "ctrl+cmd+n",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    // {
    //     "key": "ctrl+cmd+d ctrl+cmd+t",
    //     "command": "editor.action.toggleTabFocusMode",
    //     "when": "vim.active && !inQuickOpen && vim.mode != 'Insert'"
    // },
    {
        "key": "ctrl+cmd+d ctrl+cmd+8",
        "command": "workbench.files.action.refreshFilesExplorer",
        "when": "activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+9",
        "command": "explorer.newFolder",
        "when": "activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+0",
        "command": "explorer.newFile",
        "when": "activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    // {
    //     "key": "ctrl+cmd+g",
    //     "command": "workbench.action.toggleSidebarVisibility",
    // },
    // {
    //     "key": "ctrl+cmd+b",
    //     "command": "multiCommand.toggleSidebarAndFocus",
    //     "when": "!sideBarVisible"
    // },
    // {
    //     "key": "shift+cmd+z",
    //     "command": "workbench.action.focusSideBar"
    // },
    // {
    //     "key": "shift+cmd+z",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     "when": "sideBarFocus"
    // },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "workbench.action.previousEditorInGroup",
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "workbench.action.previousEditorInGroup",
        "when": "terminalFocus && terminalProcessSupported && terminalEditorFocus"
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "workbench.action.nextEditorInGroup",
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "workbench.action.nextEditorInGroup",
        "when": "terminalFocus && terminalProcessSupported && terminalEditorFocus"
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "workbench.action.chat.previousCodeBlock",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "workbench.action.chat.nextCodeBlock",
        "when": "chatIsEnabled && inChat"
    },

    // {
    //     "key": "ctrl+j",
    //     "command": "workbench.action.previousEditor",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    // {
    //     "key": "ctrl+k",
    //     "command": "workbench.action.nextEditor",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    // {
    //     "key": "ctrl+j",
    //     "command": "workbench.action.previousEditor",
    //     "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    // },
    // {
    //     "key": "ctrl+k",
    //     "command": "workbench.action.nextEditor",
    //     "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    // },

    {
        "key": "ctrl+cmd+g",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+cmd+g",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+cmd+space",
        "command": "-toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+h",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    },

    // // tabcomplete enable
    // {
    //     "key": "tab",
    //     "command": "selectNextSuggestion",
    //     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    // },
    // {
    //     "key": "shift+tab",
    //     "command": "selectPrevSuggestion",
    //     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus && vim.active && vim.mode == 'Insert'"
    // },
    // {
    //     "key": "tab",
    //     "command": "editor.action.inlineSuggest.commit",
    //     "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    // },
    // // tabcomplete enable
    // // tabcomplete disable
    // {
    //     "key": "tab",
    //     "command": "-editor.action.inlineSuggest.commit",
    //     "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    // },
    // {
    //     "key": "shift+space",
    //     "command": "editor.action.inlineSuggest.commit",
    //     "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    // },
    // {
    //     // "key": "ctrl+l",
    //     "key": "shift+space",
    //     "command": "acceptSelectedSuggestion",
    //     "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.active && vim.mode == 'Insert'"
    // },
    // // tabcomplete disable
    {
        "key": "ctrl+cmd+enter",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        // "key": "ctrl+l",
        "key": "ctrl+cmd+enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "(!terminalEditorFocus && terminalFindFocused && terminalProcessSupported) || (!terminalEditorFocus && terminalFocus && terminalProcessSupported)"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "workbench.action.terminal.focusNext",
        "when": "(!terminalEditorFocus && terminalFindFocused && terminalProcessSupported) || (!terminalEditorFocus && terminalFocus && terminalProcessSupported)"
    },
    {
        "key": "shift+cmd+j",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+k",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        // "key": "ctrl+cmd+d ctrl+cmd+r",
        "key": "shift+cmd+d shift+cmd+r",
        "command": "gitlens.views.searchAndCompare.searchCommits"
    },
    {
        "key": "ctrl+cmd+m",
        // "command": "workbench.view.scm",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.view.scm",
                "workbench.action.focusActiveEditorGroup",
                "workbench.view.scm"
            ]
        }

    },
    {
        "key": "ctrl+cmd+m",
        // "command": "workbench.action.toggleSidebarVisibility",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "activeViewlet == 'workbench.view.scm' && sideBarFocus"
    },


    {
        "key": "cmd+m cmd+'",
        "command": "gitlens.showCommitsInView"
    },

    {
        "key": "cmd+m cmd+m",
        "command": "git.openChange",
        "when": "editorTextFocus && !isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+n",
        "command": "gitlens.openFileRevision",
        "when": "editorTextFocus && !isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+h",
        "command": "gitlens.diffWithWorking",
        // "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "cmd+m cmd+b",
        "command": "gitlens.diffWithRevision",
        "when": "editorTextFocus && !isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+s",
        "command": "git.commitStaged",
        // "when": "editorTextFocus"
    },
    {
        "key": "cmd+m cmd+a",
        "command": "git.viewStagedChanges",
        // "when": "editorTextFocus"
    },
    {
        "key": "cmd+m cmd+d",
        "command": "gitlens.toggleFileChanges",
        // "when": "editorTextFocus"
    },
    {
        "key": "cmd+m cmd+oem_comma",
        "command": "multiCommand.openscmhead",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+m cmd+o",
        "command": "magit.log-file"
    },
    {
        "key": "cmd+m cmd+r",
        "command": "workbench.action.localHistory.restoreViaPicker"
    },
    {
        "key": "cmd+m",
        "command": "git.openFile",
        "when": "editorTextFocus && isInDiffEditor"
    },
    {
        "key": "cmd+m",
        "command": "gitlens.openWorkingFile",
        "when": "inDiffEditor && isInDiffEditor"
    },
    {
        "key": "alt+m",
        "command": "multiCommand.openscmhead",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+m",
        "command": "gitlens.externalDiff",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+f",
        // "command": "workbench.action.compareEditor.focusOtherSide",
        "command": "multiCommand.diff_next",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+alt+cmd+m",
        // "command": "gitlens.toggleFileBlame",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.closePanel",
                "gitlens.toggleFileBlame",
                "workbench.view.extension.gitlensInspect",
                "workbench.action.focusActiveEditorGroup"
            ]
        },
        "when": "config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "shift+alt+cmd+m",
        "command": "gitlens.toggleFileBlame",
        "when": "config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/ && gitlens:annotationStatus == 'computed'"
    },
    // {
    //     "key": "ctrl+shift+m",
    //     "command": "activitybar.codestream.focus",
    //     "when": "focusedView != 'activitybar.codestream'"
    // },
    {
        "key": "shift+cmd+m",
        "command": "gitlens.views.commits.focus"
    },
    {
        "key": "shift+cmd+m",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when": "focusedView == 'activitybar.codestream'"
        // "when": "!sideBarFocus && !editorTextFocus && activePanel =~ /workbench\\.view\\.extension\\.gitlens/"
        "when": "!sideBarFocus && !editorTextFocus && (focusedView =~ /gitlens\\.views\\.commits/ || focusedView =~ /gitlens\\.views\\.fileHistory/)"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+shift+m",
        // "command": "gitlens.views.fileHistory.focus",
        "command": "gitlens.views.commitDetails.focus",
        // "command": "workbench.view.extension.gitlensPanel"
        // "when": "!view.gitlens.views.commitDetails.visible"
    },
    {
        "key": "ctrl+shift+m",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when": "!sideBarFocus && !editorTextFocus && view.gitlens.views.commitDetails.visible"
        // "when": "!sideBarFocus && !editorTextFocus && activePanel =~ /workbench\\.view\\.extension\\.gitlens/"
        "when": "!sideBarFocus && !editorTextFocus && focusedView =~ /gitlens\\.views\\..*/ && !(focusedView =~ /gitlens\\.views\\.commits/ || focusedView =~ /gitlens\\.views\\.fileHistory/)"
    },
    {
        "key": "alt+b",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    // "args": "gdbserver_process (httpgw)"
                    "args": "start_process (agent)"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    // "args": "gdbserver_process (httpgw)"
                    "args": "start_process (agent)"
                }
            ]
        },
    },
    {
        "key": "alt+b",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    // "args": "gdbserver_process (httpgw)"
                    "args": "start_process_remote (agent)"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    // "args": "gdbserver_process (httpgw)"
                    "args": "start_process_remote (agent)"
                }
            ]
        },
        "when": "remoteConnectionState == 'connected'"
    },
    {
        "key": "cmd+b",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "start_process (httpgw)"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "start_process (httpgw)"
                }
            ]
        },
    },
    {
        "key": "cmd+b",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "start_process_remote (httpgw)"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "start_process_remote (httpgw)"
                }
            ]
        },
        "when": "remoteConnectionState == 'connected'"
    },
    {
        "key": "shift+alt+cmd+b",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "debug_config_lib"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "debug_config"
                }
            ]
        },
        "when": "remoteConnectionState == 'connected'"
    },

    {
        "key": "ctrl+cmd+d ctrl+cmd+f",
        "command": "multiCommand.openscmhead",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && termincmdextSelected"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },

    // search
    {
        "key": "ctrl+cmd+0",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "ctrl+cmd+0",
        // "command": "workbench.action.findInFiles",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.clipboardCopyAction",
                "workbench.action.findInFiles",
                "execPaste"
            ],
            "interval": 100
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "ctrl+shift+cmd+0",
        // "command": "workbench.action.findInFiles",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.clipboardCopyAction",
                "workbench.action.findInFiles",
                "execPaste"
            ],
            "interval": 100
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "ctrl+cmd+0",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "searchViewletVisible && focusedView == 'workbench.view.search' && inputFocus"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "shift+cmd+0",
        "command": "search.action.focusSearchList"
    },
    {
        "key": "shift+cmd+0",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "searchViewletVisible && focusedView == 'workbench.view.search' && !inputFocus"
    },
    {
        "key": "ctrl+shift+9",
        "command": "filesExplorer.findInFolder",
        // "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+9",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "searchViewletVisible && focusedView == 'workbench.view.search'"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+cmd+o",
        "command": "search.action.openEditor"
    },
    {
        "key": "ctrl+cmd+o",
        // "command": "search.action.openEditor",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "search.action.openEditor",
                "multiCommand.SearchToEditor",
                // "search.action.focusNextSearchResult",
                // "extension.vim_escape",
                // "cursorHome"
            ],
            "interval": 300
        },
        "when": "editorTextFocus && editorHasSelection"
    },
    {
        "key": "ctrl+cmd+o",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor && !searchInputBoxFocus"
    },
    {
        "key": "ctrl+cmd+o",
        // "command": "workbench.action.focusActiveEditorGroup",
        // "command": "extension.vim_escape",
        "command": "multiCommand.SearchToEditor",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "shift+cmd+o",
        // "command": "workbench.action.focusActiveEditorGroup",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "search.action.openEditor",
                "search.action.focusNextSearchResult",
                "extension.vim_escape",
                "cursorHome"
            ],
            "interval": 100
        },
    },
    {
        "key": "shift+cmd+o",
        // "command": "workbench.action.focusActiveEditorGroup",
        "command": "multiCommand.SearchToEditor",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "enter",
        // "command": "workbench.action.focusActiveEditorGroup",
        "command": "multiCommand.SearchToEditor",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "escape",
        // "command": "workbench.action.focusActiveEditorGroup",
        "command": "multiCommand.SearchToEditor",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "shift+cmd+o",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.terminal.openDetectedLink",
        "when": "terminalFocus && terminalHasBeenCreated"
    },
    {
        "key": "ctrl+shift+o",
        "command": "search.action.focusFilesToInclude",
        // search.action.focusFilesToExclude
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+shift+alt+o",
        "command": "search.action.focusFilesToExclude",
        "when": "inSearchEditor"
    },




    // reference focus
    {
        "key": "alt+u",
        "command": "references-view.tree.focus"
        // "command": "workbench.view.extension.references-view"
        // "command": "CppReferencesView.focus",
    },
    {
        "key": "alt+o",
        "command": "references-view.tree.focus"
        // "command": "workbench.view.extension.references-view"
        // "command": "CppReferencesView.focus",
    },
    {
        "key": "alt+o",
        "command": "references-view.tree.focus",
        "when": "editorFocus && editorLangId == 'python'"
    },
    {
        "key": "alt+o",
        // "command": "CppReferencesView.focus",
        "command": "references-view.tree.focus",
        "when": "editorFocus && editorLangId =~ /(c|cpp)/"
    },
    {
        "key": "alt+o",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView =~ /(r|R)eferences.*(v|V)iew/"
    },
    // {
    //     "key": "alt+o",
    //     "command": "multiCommand.initReference",
    //     // "when": "focusedView =~ /(r|R)eferences.*(v|V)iew/"
    // },
    {
        "key": "alt+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "alt+o",
        "command": "-workbench.action.files.openFile",
        "when": "false"
    },
    {
        "key": "alt+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "shift+cmd+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
        // "when": "!patternExcludesInputBoxFocus && !patternIncludesInputBoxFocus && !inputFocus"
    },
    {
        "key": "enter",
        "command": "multiCommand.search_list_enter",
        "when": "searchViewletVisible && sideBarFocus && listFocus && !inputFocus"
    },
    {
        "key": "shift+cmd+h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "shift+cmd+h",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "searchViewletVisible && sideBarFocus"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "f11",
        "command": "search.action.focusNextSearchResult"
        // "command": "multiCommand.search_focusNextResult",
    },
    {
        "key": "ctrl+shift+cmd+i",
        "command": "search.action.focusNextSearchResult"
        // "command": "multiCommand.search_focusNextResult",
    },
    {
        "key": "f1",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "f10",
        "command": "search.action.focusPreviousSearchResult",
        // "command": "multiCommand.search_focusPrevResult",
    },
    {
        "key": "ctrl+shift+cmd+o",
        "command": "search.action.focusPreviousSearchResult",
        // "command": "multiCommand.search_focusNextResult",
    },
    {
        "key": "f3",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+cmd+b",
        "command": "-gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'cmdernate'"
    },
    {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "f",
        "command": "workbench.action.focusNextGroup",
        "when": "!editorFocus && activeEditor == 'WebviewEditor' && activeWebviewPanelId != 'vsc-webshark' && activeWebviewPanelId != 'editor.erd' && vim.active && !inputFocus"
    },
    {
        "key": "shift+f",
        "command": "workbench.action.focusPreviousGroup",
        "when": "!editorFocus && activeEditor == 'WebviewEditor' && activeWebviewPanelId != 'vsc-webshark' && activeWebviewPanelId != 'editor.erd' && vim.active && !inputFocus"
    },
    {
        "key": "shift+f",
        "command": "workbench.action.focusPreviousGroup",
        "when": "editorReadonly && !inputFocus && !textInputFocus && vim.active"
    },
    {
        "key": "f",
        "command": "workbench.action.focusNextGroup",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+f",
        "command": "workbench.action.focusPreviousGroup",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+cmd+f",
        "command": "workbench.action.focusNextGroup",
    },
    {
        "key": "shift+cmd+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.focusPreviousGroup",
    },
    {
        "key": "ctrl+cmd+f",
        "command": "workbench.action.focusNextGroup",
        "when": "(terminalFocus && termianlEditorFocus) || (terminalFindFocused)"
    },
    // terminalEditor
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.focusPreviousGroup",
        "when": "(terminalFocus && termianlEditorFocus) || (terminalFindFocused)"
    },
    {
        "key": "ctrl+cmd+f",
        // "command": "workbench.action.compareEditor.focusOtherSide",
        "command": "multiCommand.diff_next",
        "when": "isInDiffEditor"
    },
    //diff
    {
        "key": "f",
        "command": "multiCommand.diff_next",
        "when": "editorTextFocus && config.diffEditor.renderSideBySide && isInDiffEditor && (!multipleEditorGroups || (multipleEditorGroups && isInDiffLeftEditor)) && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "shift+f",
        "command": "multiCommand.diff_next",
        "when": "editorTextFocus && config.diffEditor.renderSideBySide && isInDiffEditor && (!multipleEditorGroups || (multipleEditorGroups && isInDiffRightEditor)) && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "shift+cmd+f",
        // "command": "workbench.action.compareEditor.focusOtherSide",
        "command": "multiCommand.diff_next",
        "when": "isInDiffEditor"
    },
    // terminal splited
    {
        "key": "cmd+l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        // "key": "shift+cmd+f",
        // "key": "cmd+f",
        "key": "cmd+q",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        // "key": "shift+cmd+s",
        "key": "cmd+s",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "cmd+f",
        "command": "actions.find",
        "when": "editorFocus"
    },
    {
        "key": "cmd+f",
        "command": "list.find",
        "when": "activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "escape",
        "command": "multiCommand.FindCancel",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "cmd+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "cmd+h",
        "command": "-gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'cmdernate'"
    },
    {
        "key": "ctrl+cmd+h",
        "command": "-rest-client.history"
    },
    {
        "key": "cmd+h",
        "command": "editor.action.startFindReplaceAction",
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.previousPanelView",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
        // "when": "panelFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/' || focusedView == ''",
        "when": "panelFocus",
    },
    {
        "key": "cmd+j",
        // "command": "workbench.action.previousPanelView",
        "command": "workbench.action.previousSideBarView",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
        // "when": "sideBarFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/'",
	"when": "sideBarFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/' || focusedView == ''",
    },
    {
        "key": "cmd+k",
        "command": "workbench.action.nextPanelView",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
        // "when": "panelFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/' || focusedView =~ 'vscode-chatgpt.view' || focusedView == ''",
        "when": "panelFocus",
    },
    {
        "key": "cmd+k",
        // "command": "workbench.action.previousPanelView",
        "command": "workbench.action.nextSideBarView",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
        // "when": "sideBarFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/'",
	"when": "sideBarFocus || focusedView == 'activitybar.codestream' || focusedView =~ '/gitlens/' || focusedView == ''",
    },
    {
        "key": "cmd+oem_5",
        "command": "-editor.action.inlineSuggest.trigger",
        "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
    },
    {
        "key": "cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "hideSuggestWidget",
                "editor.action.inlineSuggest.trigger"
            ]
        },
        "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible && suggestWidgetVisible"
    },
    {
        "key": "cmd+l",
        "command": "editor.action.inlineSuggest.trigger",
        "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+f",
        // "command": "terminal.focus",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFindFocused && terminalProcessSupported && !panelFocus"
    },
    {
        "key": "cmd+f",
        "command": "terminal.focus",
        "when": "terminalFindFocused && terminalProcessSupported && panelFocus"
    },
    {
        "key": "cmd+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFocus && terminalProcessSupported && !terminalFindFocused"
    },
    // {
    //     "key": "shift+cmd+f",
    //     "command": "workbench.action.terminal.focusFind",
    //     "when": "(terminalFindFocused && terminalProcessSupported && !terminalEditorFocus) || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    // },
    // {
    //     "key": "ctrl+cmd+f",
    //     "command": "workbench.action.terminal.focusFind",
    //     "when": "(terminalFindFocused && terminalProcessSupported && !editorFocus && !terminalEditorFocus) || (terminalFocus && terminalProcessSupported && !terminalEditorFocus)"
    // },
    // {
    //     "key": "ctrl+cmd+f",
    //     // "command": "workbench.action.terminal.focusFind",
    //     "command": "workbench.action.terminal.focus",
    //     "when": "terminalFindFocused && terminalProcessSupported"
    // },
    // {
    //     "key": "shift+cmd+f",
    //     "command": "workbench.action.terminal.searchWorkspace",
    //     "when": "terminalFocus && terminalProcessSupported && termincmdextSelected"
    // },
    {
        "key": "ctrl+c",
        "command": "editor.action.deleteLines",
        "when": "inDebugRepl",
    },
    // {
    //     "key": "tab",
    //     "command": "multiCommand.DebugCurrent",
    //     "when": "inDebugRepl",
    // },
    {
        "key": "ctrl+p",
        "command": "history.showPrevious",
        "when": "inDebugRepl",
    },
    {
        "key": "ctrl+n",
        "command": "history.showNext",
        "when": "inDebugRepl",
    },
    {
        "key": "up",
        "command": "history.showPrevious",
        "when": "inDebugRepl",
    },
    {
        "key": "down",
        "command": "history.showNext",
        "when": "inDebugRepl",
    },
    {
        "key": "ctrl+enter",
        "command": "multiCommand.DebugEnter",
        "when": "inDebugRepl",
    },
    {
        "key": "enter",
        "command": "repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus",
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "inDebugRepl && textInputFocus && !editorFocus"
    },
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "inDebugRepl && textInputFocus && !editorFocus"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "inDebugRepl && textInputFocus && !editorFocus"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "inDebugRepl && textInputFocus && !editorFocus"
    },
    {
        "key": "shift+cmd+n shift+cmd+o",
        "command": "editor.action.organizeImports",
        "when": "editorFocus"
    },
    {
        // 정의로 이동
        "key": "ctrl+u",
        // "command": "editor.action.revealDefinition",
        // "command": "editor.action.peekDefinition",
        // "command": "extension.goto-symbol-stack.goToSymbolDeclaration",
        // "command": "symbolNavigateBack.revealDefinition",
        // workbench.action.keepEditor
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "symbolNavigateBack.revealDefinition",
                // "workbench.action.keepEditor",
            ],
            "interval": 100,
        },
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    // {
    //     "key": "cmd+[mouse button]",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "symbolNavigateBack.revealDefinition",
    //             "workbench.action.keepEditor",
    //         ],
    //         "interval": 100,
    //     },
    //     "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    // },
    {
        "key": "ctrl+u",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        // 측면에서 정의 열기 후 이동
        "key": "shift+cmd+u",
        // "key": "ctrl+cmd+u",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "symbolNavigateBack.executeCommand",
                    "args": "editor.action.revealDefinitionAside"
                },
                // "workbench.action.keepEditor",
            ],
            "interval": 100,
        },
        // "command": "symbolNavigateBack.executeCommand",
        // "args": "editor.action.revealDefinitionAside"
    },
    // {
    //     // 정의로 이동 (peek, stack no save)
    //     "key": "ctrl+shift+cmd+u",
    //     "command": "editor.action.peekDefinition",
    //     // "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    // },
    // {
    //     // 심볼 검색
    //     "key": "ctrl+shift+u",
    //     "command": "symbolNavigateBack.executeCommand",
    //     "args": "workbench.action.showAllSymbols",
    //     // "command": "workbench.action.showAllSymbols",
    //     "when": "editorTextFocus"
    // },

    {
        // Reference로 이동
        "key": "ctrl+shift+u",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        // 참조 검색
        "key": "ctrl+shift+cmd+u",
        // "command": "references-view.findReferences",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "references-view.findReferences",
                "workbench.action.focusActiveEditorGroup",
                // "multiCommand.initReference",
            ],
            "interval": 100,
        },
        "when": "editorHasReferenceProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+alt+u",
        "command": "SonarLint.AnalyseOpenFile"
    },
    {
        // 참조 검색
        "key": "ctrl+shift+alt+u",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorTextFocus"
    },
    {
        // 타입으로 이동
        "key": "ctrl+cmd+u",
        // "key": "shift+cmd+u",
        "command": "symbolNavigateBack.executeCommand",
        "args": "multiCommand.peekTypeDef",
        // "args": "editor.action.peekTypeDefinition",
        // "args": "editor.action.peekTypeDefinition"
        // "command": "editor.action.peekTypeDefinition",
    },
    {
        // 선언으로 이동
        "key": "cmd+u",
        // "command": "editor.action.revealDeclaration",
        // "command": "editor.action.peekDeclaration",
        // "command": "symbolNavigateBack.revealDeclaration",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "symbolNavigateBack.revealDeclaration",
                // "workbench.action.keepEditor",
            ],
            "interval": 100,
        },

    },
    {
        // 스택 앞으로 이동
        "key": "cmd+t",
        // "command": "extension.goto-symbol-stack.goNextOnStack"
        "command": "symbolNavigateBack.navigateForward",
    },
    {
        // 스택 뒤로 이동
        "key": "ctrl+t",
        // "command": "extension.goto-symbol-stack.goPrevOnStack",
        // "command": "symbolNavigateBack.navigateBack",
        // "command": "workbench.action.navigateBack",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                // "workbench.action.closeActiveEditor",
                "symbolNavigateBack.navigateBack",
                // "workbench.action.keepEditor"
            ],
            "interval": 1
        },

        "when": "vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "alt+t",
        "command": "workbench.action.navigateBack",
    },
    // {
    //     "key": "ctrl+cmd+u",
    //     // "command": "workbench.action.focusPanel",
    //     "command": "multiCommand.peekNewTab",
    //     "when": "!inReferenceSearchEditor && referenceSearchVisible"
    // },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "cmd+q",
        "command": "togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+q",
        "command": "togglePeekWidgetFocus",
        "when": "!inReferenceSearchEditor && referenceSearchVisible"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "oem_1",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "oem_7",
        "command": "list.focusLast",
        "when": "listFocus && !inputFocus"
    },
    // {
    //     "key": "g g",
    //     "command": "-list.focusFirst",
    //     "when": "listFocus && !inputFocus"
    // },
    {
        "key": "g v",
        "command": "list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "v",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "-list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "ctrl+u",
        "command": "-list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus && activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "listFocus && activeViewlet == 'workbench.view.explorer' && sideBarFocus"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+oem_6",
        "command": "-editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "cmd+oem_1",
        "command": "editor.action.showDefinitionPreviewHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+cmd+oem_1",
        "command": "editor.action.showHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "h",
        "command": "editor.action.scrollLeftHover",
        "when": "editorHoverFocused && vim.active"
    },
    {
        "key": "j",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused && vim.active"
    },
    {
        "key": "k",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused && vim.active"
    },
    {
        "key": "l",
        "command": "editor.action.scrollRightHover",
        "when": "editorHoverFocused && vim.active"
    },
    {
        "key": "ctrl+g",
        "command": "settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+f",
        "command": "-settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+cmd+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+cmd+pagedown",
        "command": "-workbench.action.terminal.scrollDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+k",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    // {
    //     "key": "ctrl+cmd+oem_comma",
    //     "command": "sshfs.terminal",
    // },

    // {
    //     "key": "shift+cmd+l",
    //     // "command": "workbench.action.toggleMaximizedPanel"
    //     // "command": "workbench.action.toggleMaximizedPanel"
    //     "command": "workbench.action.terminal.moveToTerminalPanel"
    // },
    // {
    //     "key": "shift+cmd+l",
    //     // "command": "workbench.action.toggleMaximizedPanel"
    //     // "command": "workbench.action.toggleMaximizedPanel"
    //     // "command": "workbench.action.terminal.moveToEditor",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             // "workbench.action.terminal.moveToTerminalPanel",
    //             "workbench.action.terminal.moveToEditor",
    //             // "workbench.action.closeAuxiliaryBar"
    //             "workbench.action.closeSidebar"
    //         ],
    //         // "interval": 100
    //     },

    //     "when": "!terminalEditorFocus && terminalFocus"
    // },

    {
        "key": "shift+cmd+l",
        // "command": "workbench.action.toggleMaximizedPanel",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.alignPanelCenter",
                "workbench.action.toggleMaximizedPanel",
            ],
            "interval": 30
        },
        // "when": "!panelFocus && !terminalFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.toggleMaximizedPanel",
                "workbench.action.alignPanelRight",
            ],
            "interval": 30
        },
        "when": "panelMaximized"
    },
    {
        "key": "shift+cmd+l",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.toggleMaximizedPanel",
                "workbench.action.alignPanelRight",
                "workbench.action.focusActiveEditorGroup"
            ],
            "interval": 30
        },
        "when": "panelFocus && terminalFocus && panelMaximized"
    },
    {
        "key": "shift+cmd+l",
        // "command": "workbench.action.toggleMaximizedPanel",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.alignPanelCenter",
                "workbench.action.toggleMaximizedPanel",
                "workbench.action.terminal.focus"
            ],
            "interval": 30
        },

        "when": "!panelFocus && view.terminal.visible && !panelMaximized"
    },
    {
        "key": "shift+cmd+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+i",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+i",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    // {
    //     "key": "shift+cmd+d shift+cmd+y",
    //     "command": "editor.action.openLink",
    //     // "args": "https://chat.openai.com/chat",
    //     // "args": {
    //     //     "url": "https://chat.openai.com/chat",
    //     //     "newWindow": true
    //     // }
    //     // "args": [
    //     //     "https://chat.openai.com/chat",
    //     // ]
    // },
    {
        "key": "cmd+l",
        "command": "-toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "cmd+l",
        "command": "-toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+o",
        "command": "-editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "shift+cmd+o",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },


    {
        "key": "cmd+o",
        "command": "-C_Cpp.SwitchHeaderSource",
        "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f3",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
        // "when": "debugState == 'stopped' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "f4",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
        // "when": "debugState != 'inactive' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "shift+f4",
        "command": "workbench.action.debug.stepBack",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "cmd+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.debug.stepBack",
        "when": "debugState == 'stopped'"
    },
    // {
    //     "key": "ctrl+x",
    //     "command": "workbench.action.debug.stepOver",
    //     // "when": "debugState != 'inactive' && editorTextFocus"
    //     "when": "debugState != 'inactive' && !terminalFocus && !terminalFindFocused && !inputFocus || debugState == 'stopped' && editorTextFocus"
    // },
    // {
    //     "key": "ctrl+c",
    //     "command": "workbench.action.debug.stepInto",
    //     // "when": "debugState != 'inactive' && editorTextFocus"
    //     "when": "debugState != 'inactive' && !terminalFocus && !terminalFindFocused && !inputFocus || debugState == 'stopped' && editorTextFocus"
    // },
    {
        "key": "f1",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f1",
        // "command": "workbench.action.debug.continue",
        "command": "multiCommand.DebugContinueCloseSidebar",
        "when": "debugState == 'stopped' && !sideBarVisible"
    },
    {
        "key": "f1",
        "command": "multiCommand.DebugStart",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    // {
    //     "key": "ctrl+z",
    //     "command": "workbench.action.debug.continue",
    //     "when": "debugState != 'inactive' && !terminalFocus && !terminalFindFocused && !inputFocus || debugState != 'inactive' && editorTextFocus"
    //     // "when": "debugState != 'inactive' && editorTextFocus"
    // },
    // {
    //     "key": "ctrl+z",
    //     "command": "multiCommand.DebugStart",
    //     // "when": "debuggersAvailable && debugState == 'inactive'"
    //     // "when": "debuggersAvailable && debugState == 'inactive' && !panelFocus && !terminalFocus && !terminalFindFocused && !inputFocus || debuggersAvailable && debugState == 'inactive' && editorTextFocus"
    // },
    {
        "key": "shift+f1",
        "command": "multiCommand.DebugDisconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "shift+f1",
        "command": "multiCommand.DebugStop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "ctrl+f1",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f9",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorTextFocus && inDebugMode"
    },
    {
        "key": "f8",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f8",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus && !sideBarFocus"
    },
    {
        "key": "ctrl+f8",
        "command": "editor.action.showHover",
    },
    {
        "key": "shift+f8",
        "command": "workbench.debug.viewlet.action.addWatchExpression",
    },
    {
        "key": "shift+f8",
        "command": "editor.debug.action.selectionToWatch",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "cmd+f8",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "activeViewlet == 'workbench.view.debug' && sideBarFocus"
    },
    // ;{
    // ;    "key": "cmd+a",
    // ;    "command": "workbench.debug.action.focusWatchView"
    // ;},
    // ;{
    // ;    "key": "cmd+a",
    // ;    "command": "workbench.action.focusActiveEditorGroup",
    // ;    "when": "focusedView == 'workbench.debug.watchExpressionsView'"
    // ;},
    // ;{
    // ;    "key": "cmd+s",
    // ;    "command": "workbench.debug.action.focusCallStackView",
    // ;    "when": "inDebugMode"
    // ;},
    // ;{
    // ;    "key": "cmd+s",
    // ;    "command": "workbench.action.focusActiveEditorGroup",
    // ;    "when": "sideBarFocus"
    // ;},
    {
        "key": "shift+cmd+a",
        "command": "workbench.debug.viewlet.action.addWatchExpression",
        "when": "!editorFocus && focusedView == 'workbench.debug.watchExpressionsView'"
    },
    // {
    //     "key": "shift+cmd+a",
    //     "command": "editor.debug.action.selectionToWatch",
    //     "when": "editorTextFocus && editorHasSelection"
    // },
    {
        "key": "shift+cmd+a",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "activeViewlet == 'workbench.view.debug' && sideBarFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeWindow",
        "when": "!editorIsOpen && multipleEditorGroups"
    },
    // macos
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
    },
    {
        "key": "ctrl+w",
        "command": "extension.vim_ctrl+w",
        // "when": "editorTextFocus && textInputFocus && vim.active && vim.mode != 'Insert'"
        "when": "editorTextFocus && textInputFocus && vim.active"
    },
    {
        "key": "cmd+d",
        "command": "multiCommand.RequestHttp",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+d",
        "command": "multiCommand.RequestandFirst",
        // "command": "multiCommand.RequestandTerm",
    },
    {
        "key": "alt+g",
        "command": "multiCommand.RequestandFirst",
    },
    {
        "key": "alt+g",
        "command": "multiCommand.RequestandTerm",
        "when": "terminalFocus"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+oem_6",
        "command": "-editor.action.indentLines",
    },
    {
        // 현재 위치 스택에 저장
        "key": "ctrl+oem_6",
        // "command": "extension.goto-symbol-stack.clearFilePosStack"
        "command": "symbolNavigateBack.saveCurrentPosition",
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "f9",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+f9",
        "command": "editor.debug.action.conditionalBreakpoint"
    },
    {
        "key": "shift+f9",
        "command": "debug.enableOrDisableBreakpoint"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+d",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+l",
        "command": "-extension.vim_navigateCtrlL",
        "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
    },
    {
        "key": "f5",
        "command": "multiCommand.DebugStart",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "shift+f5",
        "command": "multiCommand.DebugDisconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "shift+f5",
        "command": "multiCommand.DebugStop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "shift+cmd+9",
        "command": "toggle.diff.renderSideBySide",
        "when": "vim.active && !inQuickOpen && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+l",
        "command": "-extension.vim_navigateCtrlL",
        "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
    },
    {
        "key": "f5",
        "command": "multiCommand.DebugStart",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "shift+f5",
        "command": "multiCommand.DebugDisconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "shift+f5",
        "command": "multiCommand.DebugStop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+a",
        "command": "extension.diffTool.diffToolLeft"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+s",
        "command": "extension.diffTool.diffToolRight"
    },

    // conflict, merge
    {
        "key": "alt+1",
        "command": "git.unstageSelectedRanges"
    },
    {
        "key": "alt+2",
        "command": "git.stageSelectedRanges"
    },
    {
        "key": "ctrl+cmd+oem_4",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+cmd+oem_6",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+cmd+oem_4",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+cmd+oem_6",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        //"key": "ctrl+cmd+oem_6",
        "key": "ctrl+cmd+oem_plus",
        "command": "editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        //"key": "ctrl+cmd+oem_4",
        "key": "ctrl+cmd+oem_minus",
        "command": "editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+b",
        "command": "explorer.download"
    },
    // {
    //     "key": "space",
    //     "command": "list.toggleExpand",
    //     "when": "listFocus && referenceSearchVisible && !inputFocus"
    // },
    {
        "key": "space",
        "command": "multiCommand.GoAndClosePeek",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "-extension.addLog"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+q",
        "command": "merge-conflict.accept.current",
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+w",
        "command": "merge-conflict.accept.incoming",
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+e",
        "command": "merge-conflict.accept.both",
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+r",
        "command": "multiCommand.merge_conflict",
        // "command": "merge-conflict.compare"
    },
    {
        "key": "ctrl+cmd+oem_4",
        "command": "merge-conflict.next",
        "when": "activeEditor == 'mergeEditor'"
    },
    {
        "key": "ctrl+cmd+oem_6",
        "command": "merge-conflict.previous",
        "when": "activeEditor == 'mergeEditor'"
    },
    {
        "key": "shift+cmd+oem_4",
        "command": "merge.goToNextUnhandledConflict",
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "shift+cmd+oem_6",
        "command": "merge.goToPreviousUnhandledConflict",
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "alt+w",
        // "command": "merge-conflict.next",
        "command": "merge.goToNextUnhandledConflict",
        // "when": ""
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "alt+e",
        // "command": "merge-conflict.previous",
        "command": "merge.goToPreviousUnhandledConflict",
        // "when": ""
        "when": "activeEditor == 'mergeEditor' && isMergeEditor && editorFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "merge-conflict.accept.all-current",
                "workbench.action.files.save"
            ],
            "interval": 1
        },
        // "command": "merge-conflict.accept.all-current"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+2",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "merge-conflict.accept.all-incoming",
                "workbench.action.files.save"
            ],
            "interval": 1
        },
        // "command": "merge-conflict.accept.all-incoming"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+3",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "merge-conflict.accept.all-both",
                "workbench.action.files.save"
            ],
            "interval": 1
        },
        // "command": "merge-conflict.accept.all-both"

    },





    // search ignorecase
    //remove
    {
        "key": "cmd+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },

    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+c",
        "command": "-toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "cmd+c",
        "command": "-toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    //add
    {
        "key": "alt+x",
        "command": "toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+x",
        "command": "workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+x",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+x",
        "command": "toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },

    {
        "key": "alt+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "alt+z",
        "command": "-workbench.action.terminal.sizeToContentWidth",
    },
    {
        "key": "alt+v",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "alt+v",
        "command": "-workbench.action.terminal.sizeToContentWidth",
    },

    {
        "key": "alt+z",
        "command": "toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+z",
        "command": "toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+z",
        "command": "workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+z",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+z",
        "command": "toggleSearchRegex",
        "when": "searchViewletFocus"
    },

    // search whole word
    {
        "key": "cmd+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "cmd+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "cmd+w",
        "command": "-toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+c",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+c",
        "command": "workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+c",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+c",
        "command": "toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "cmd+z",
        "command": "-workbench.action.terminal.sizeToContentWidth",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
    },
    {
        "key": "cmd+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_minus",
        "command": "editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+cmd+r",
        "command": "-rest-client.request",
        "when": "editorTextFocus && resourceExtname == .http"
    },
    {
        "key": "ctrl+cmd+r",
        "command": "-rest-client.request",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+v",
        "command": "rest-client.generate-codesnippet",
        "when": "editorTextFocus && resourceExtname == '.http'"
    },
    {
        "key": "ctrl+cmd+c",
        "command": "-rest-client.generate-codesnippet",
        "when": "editorTextFocus && resourceExtname == .http"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+v",
        "command": "rest-client.generate-codesnippet",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "ctrl+cmd+c",
        "command": "-rest-client.generate-codesnippet",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "ctrl+shift+cmd+oem_1",
        "command": "workbench.view.extension.bookmarks"
    },
    {
        "key": "ctrl+shift+cmd+oem_1",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "sideBarFocus && activeViewlet == 'workbench.view.extension.bookmarks'"
    },
    // {
    //     "key": "cmd+m",
    //     // "command": "workbench.action.toggleSidebarVisibility",
    //     "command": "bookmarks.toggle",
    //     "when": "editorTextFocus"
    // },
    // {
    //     "key": "ctrl+cmd+x",
    //     //"command": "workbench.view.extension.references-view"
    //     "command": "references-view.tree.focus"
    // },
    // {
    //     "key": "ctrl+cmd+x",
    //     "command": "workbench.action.toggleSidebarVisibility",
    //     "when": "activeViewlet == 'workbench.view.extension.references-view' && sideBarFocus && focusedView == 'references-view.tree' && listFocus"
    // },
    // {
    //     "key": "shift+cmd+x",
    //     "command": "CppReferencesView.focus",
    // },
    // {
    //     "key": "shift+cmd+x",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     "when": "focusedView == 'references-view.tree' || focusedView == 'CppReferencesView'"
    // },
    {
        "key": "shift+cmd+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+oem_2",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+cmd+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "shift+cmd+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+cmd+c",
        "command": "-search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    // {
    //     "key": "ctrl+y",
    //     "command": "redo",
    //     "when": "editorTextFocus && textInputFocus && !vim.active && vim.mode == 'Insert'"
    // },
    {
        "key": "shift+enter",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "enter",
        "command": "-revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "shift+cmd+d shift+cmd+e",
        "command": "workbench.action.editor.changeEncoding"
    },
    {
        "key": "cmd+f9",
        "command": "workbench.debug.action.focusBreakpointsView",
        // "when" : "focusedView != 'workbench.debug.breakPointsView'"
        "when" : "!breakpointsFocused"
    },
    {
        "key": "cmd+f9",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when" : "focusedView == 'workbench.debug.breakPointsView' && sideBarFocus"
        "when" : "breakpointsFocused && sideBarFocus"
    },
    {
        "key": "cmd+j",
        "command": "list.focusDown",
        "when" : "breakpointsFocused && sideBarFocus"
    },
    {
        "key": "cmd+k",
        "command": "list.focusUp",
        "when" : "breakpointsFocused && sideBarFocus"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+shift+cmd+p",
        "command": "multiCommand.QuickOpenView",
    },
    {
        "key": "ctrl+shift+oem_comma",
        "command": "-editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+l",
        "command": "logExplorer.focus",
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+l",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "sideBarFocus && focusedView == 'logExplorer'"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "sideBarFocus && focusedView == 'logExplorer'"
    },
    {
        "key": "ctrl+shift+cmd+x",
        "command": "multiCommand.CloseSideAll",
    },
    {
        "key": "ctrl+shift+cmd+h",
        "command": "workbench.action.closeSidebar"
        // "command": "multiCommand.CloseSideAll",
    },
    {
        "key": "ctrl+shift+cmd+h",
        // "command": "workbench.action.focusSideBar",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.toggleSidebarVisibility",
                "workbench.action.focusSideBar"
            ],
            "interval": 0.1,
        },
        // "command": "workbench.action.toggleSidebarVisibility",
        "when": "!sideBarVisible"
    },
    {
        "key": "ctrl+shift+cmd+b",
        // "command": "workbench.action.focusSideBar",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.panel.repl.view.focus",
                "workbench.debug.panel.action.clearReplAction",
            ],
            "interval": 0.1,
        },
    },
    // {
    //     "key": "ctrl+shift+cmd+h",
    //     "command": "multiCommand.CloseSideAll",
    // },

    // {
    //     "key": "ctrl+cmd+s",
    //     // "command": "workbench.action.closePanel"
    //     "command": "workbench.action.togglePanel"
    // },
    {
        "key": "ctrl+cmd+w",
        "command": "workbench.action.closeSidebar"
        // "command": "multiCommand.CloseSideAll",
    },
    {
        "key": "ctrl+cmd+w",
        // "command": "workbench.action.focusSideBar",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.toggleSidebarVisibility",
                "workbench.action.focusSideBar"
            ],
            "interval": 0.1,
        },
        // "command": "workbench.action.toggleSidebarVisibility",
        "when": "!sideBarVisible"
    },
    {
        "key": "ctrl+shift+cmd+a",
        // "command": "workbench.action.closePanel"
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "ctrl+cmd+s",
        "command": "workbench.action.focusAuxiliaryBar",
    },
    {
        "key": "ctrl+cmd+s",
        "command": "workbench.action.closeAuxiliaryBar",
        // "command": "workbench.action.toggleAuxiliaryBar",

        // cursor
        // "command": "aichat.close-sidebar",
        "when": "auxiliaryBarVisible"
    },
    {
        "key": "ctrl+cmd+q",
        "command": "workbench.action.focusPanel",
    },
    {
        "key": "ctrl+cmd+q",
        "command": "workbench.action.closePanel",
        "when": "panelVisible"
    },
    // {
    //     "key": "ctrl+shift+cmd+b",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "workbench.action.closePanel",
    //             "workbench.action.closeSidebar"
    //         ],
    //         "interval": 0.5,
    //     },
    // },
    // {
    //     "key": "ctrl+shift+cmd+b",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "workbench.action.focusPanel",
    //             "workbench.action.toggleSidebarVisibility",
    //             "workbench.action.focusActiveEditorGroup",
    //         ],
    //         "interval": 0.5,
    //     },
    //     "when": "!panelVisible && !sideBarVisible"
    // },
    // {
    //     "key": "cmd+g",
    //     "command": "logExplorer.focus",
    // },
    // {
    //     "key": "cmd+g",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     "when": "sideBarFocus && focusedView == 'logExplorer'"
    // },
    {
        "key": "cmd+g",
        "command": "workbench.action.files.revert"
    },

    {
        // "key": "shift+cmd+q",
        "key": "alt+q",
        "command": "logviewer.clearLogView"
    },
    {
        "key": "shift+cmd+d shift+cmd+8",
        "command": "multiCommand.positionPanelLeft",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+d shift+cmd+9",
        // "key": "shift+cmd+d shift+cmd+m",
        "command": "multiCommand.positionPanelBottom",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+d shift+cmd+0",
        // "key": "shift+cmd+d shift+cmd+oem_comma",
        "command": "multiCommand.positionPanelRight",
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+oem_period",
        "command": "sqltools.executeQueryFromFile"
    },
    {
        "key": "cmd+oem_4",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+oem_5",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+oem_5",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+oem_5",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+cmd+oem_5",
        "command": "workbench.action.toggleEditorWidths",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_5",
        "command": "workbench.action.evenEditorWidths",
    },
    {
        "key": "ctrl+shift+cmd+oem_5",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "extension.vim_ctrl+shift+k",
        // "when": "editorTextFocus && vim.active && vim.use<C-shift+k>"
    },
    {
        "key": "ctrl+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    // only shift+cmd / =,-
    {
        "key": "ctrl+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "cmd+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "cmd+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "shift+cmd+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+cmd+o",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.files.newUntitledFile",
        "when": "!panelMaximized"
    },
    {
        "key": "ctrl+shift+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f4",
        "command": "-goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+f4",
        "command": "-references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "ctrl+shift+cmd+f11",
        "command": "workbench.action.toggleFullScreen",
        "when": "!isIOS"
    },
    // {
    //     "key": "ctrl+alt+f",
    //     "command": "workbench.action.toggleFullScreen",
    //     "when": "!isIOS"
    // },
    {
        "key": "f11",
        "command": "-workbench.action.toggleFullScreen",
        "when": "!isIOS"
    },
    {
        "key": "cmd+f11",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+f11",
        "command": "editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+f3",
        "command": "-editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+f10",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+f10",
        "command": "editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+f3",
        "command": "-editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+f3",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "f11",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f10",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f3",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+f3",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f3",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "f11",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported"
    },
    // {
    //     "key": "enter",
    //     "command": "workbench.action.terminal.findNext",
    //     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported"
    // },
    // {
    //     "key": "enter",
    //     "command": "-workbench.action.terminal.findPrevious",
    //     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported"
    // },
    // {
    //     "key": "shift+enter",
    //     "command": "workbench.action.terminal.findPrevious",
    //     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported"
    // },
    {
        "key": "shift+alt+enter",
        "command": "editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "shift+f10",
        "command": "-editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+f7",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "cmd+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+f7",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "cmd+f7",
        "command": "testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "cmd+f8",
        "command": "-testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "ctrl+shift+f7",
        "command": "testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+cmd+f8",
        "command": "-testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "shift+f9",
        "command": "-settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "ctrl+cmd+x",
        "command": "workbench.debug.action.focusWatchView"
    },
    {
        "key": "ctrl+cmd+x",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'workbench.debug.watchExpressionsView'"
    },
    {
        "key": "ctrl+shift+s",
        "command": "editor.debug.action.selectionToWatch",
        // "when": "editorHasSelection && editorTextFocus"
        "when": "editorTextFocus"
    },
    {
        // "key": "ctrl+shift+cmd+s",
        "key": "ctrl+cmd+oem_comma",
        "command": "workbench.debug.action.focusVariablesView"
    },
    {
        // "key": "ctrl+shift+cmd+s",
        "key": "ctrl+cmd+oem_comma",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'workbench.debug.variablesView'"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "activeViewlet == 'workbench.view.debug' && sideBarFocus"
    },
    {
        "key": "shift+cmd+oem_2",
        "command": "manpages.openFromCursor",
        "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "shift+cmd+oem_2",
        "command": "manpages.openFromSelection",
        "when": "editorTextFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown-preview-enhanced.openPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_comma",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "markdown.showPreviewToSide",
                "workbench.action.focusPreviousGroup"
            ]
        },
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "alt+d",
        "command": "-plantuml.preview"
    },
    // plantuml
    // https://plantuml.com/ko/activity-diagram-beta
    // https://ltlkodae.tistory.com/4
    // https://velog.io/@eunjeong/TIL-VSCode-PlantUML
    {
        "key": "ctrl+cmd+d ctrl+cmd+m",
        "command": "plantuml.preview",
        "when": "!notebookEditorFocused && editorLangId == 'plantuml'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+m",
        // "command": "markdown-preview-enhanced.openPreview",
        "command": "markdown-preview-enhanced.openPreviewToTheSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+cmd+d shift+cmd+m",
        "command": "markdown-preview-enhanced.openPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "shift+cmd+d shift+cmd+oem_comma",
        "command": "markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_period",
        "command": "markdown.extension.toc.create",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "alt+cmd+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+alt+cmd+'",
        "command": "workbench.action.reloadWindow",
    },
    {
        "key": "ctrl+shift+z",
        "command": "-redo"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+h",
        "command": "hexdump.hexdumpFile"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+j",
        "command": "extension.dataConversion"
    },
    {
        "key": "cmd+d",
        "command": "-extension.dataConversion"
    },
    {
        "key": "ctrl+oem_period",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "cmd+oem_period",
        "command": "debug.enableOrDisableBreakpoint"
    },
    {
        "key": "ctrl+shift+oem_period",
        "command": "editor.debug.action.conditionalBreakpoint"
    },
    {
        "key": "shift+cmd+oem_period",
        "command": "-gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'cmdernate' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "shift+cmd+oem_period",
        "command": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction"
    },
    {
        "key": "ctrl+cmd+oem_period",
        "command": "workbench.debug.action.focusBreakpointsView",
        // "when" : "focusedView != 'workbench.debug.breakPointsView'"
        "when" : "!breakpointsFocused"
    },
    {
        "key": "ctrl+cmd+oem_period",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when" : "focusedView != 'workbench.debug.breakPointsView'"
        "when" : "breakpointsFocused"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "cmd+oem_4",
        "command": "-editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+y",
        "command": "editor.action.indentUsingSpaces"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+t",
        "command": "editor.action.indentUsingTabs"
    },
    {
        "key": "ctrl+oem_1 ctrl+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 c",
        "command": "-testing.runAtCursor",
        "when": "editorTextFocus"
    },
    // c test
    {
        // "key": "ctrl+cmd+a",
        "key": "ctrl+cmd+z",
        // "key": "ctrl+cmd+oem_7",
        "command": "workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        // "key": "ctrl+cmd+a",
        "key": "ctrl+cmd+z",
        // "key": "ctrl+cmd+oem_7",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'workbench.panel.repl.view'"
    },
    {
        // "key": "ctrl+cmd+oem_7",
        // "key": "ctrl+cmd+z",
        "key": "ctrl+cmd+oem_7",
        "command": "workbench.view.testing.focus"
    },
    {
        // "key": "ctrl+cmd+oem_7",
        // "key": "ctrl+cmd+z",
        "key": "ctrl+cmd+oem_7",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+l",
        "command": "testing.openOutputPeek"
    },
    // {
    //     "key": "ctrl+cmd+a ctrl+cmd+oem_1",
    //     "command": "testing.openOutputPeek"
    // },
    {
        "key": "ctrl+oem_1 ctrl+m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+k",
        "command": "testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+oem_1 ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+b",
        // "command": "testing.runCurrentFile",
        "command": "multiCommand.TestBuildFilePrint",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+n",
        // "command": "testing.runAtCursor",
        "command": "multiCommand.TestBuildCursorPrint",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+m",
        "command": "testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+i",
        // "command": "testing.reRunLastRun",
        "command": "multiCommand.TestBuildLastPrint",
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+o",
        "command": "testing.debugLastRun",
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+c",
        "command": "testing.clearTestResults"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+r",
        "command": "testMate.cmd.reload-tests"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+h",
        // "command": "multiCommand.TestTask",
        "command": "workbench.action.tasks.test",
        "when": "testing.canRefresh"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+t",
        // "command": "multiCommand.TestTask",
        "command": "testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+p",
        "command": "testing.toggleInlineTestOutput"
    },
    // focus test
    {
        "key": "ctrl+cmd+a ctrl+cmd+f",
        "command": "workbench.view.testing.focus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+f",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+s",
        "command": "workbench.view.testing.focus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+s",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+g",
        "command": "testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "ctrl+oem_1 ctrl+r",
        "command": "-testing.refreshTests",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+y",
        "command": "testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 ctrl+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+w",
        // "command": "testing.runCurrentFile"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "testing.runCurrentFile",
                // "workbench.action.terminal.toggleTerminal",
                "workbench.action.closePanel",
                "workbench.action.focusActiveEditorGroup"
            ],
            "interval": 10
        }
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+u",
        // "command": "testing.runCurrentFile"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "testing.runCurrentFile",
                // "workbench.action.terminal.toggleTerminal",
                // "workbench.action.closePanel",
                "testing.showMostRecentOutput",
                "workbench.action.focusActiveEditorGroup"
            ],
            "interval": 10
        }
    },
    {
        "key": "shift+cmd+oem_5",
        "command": "workbench.action.splitEditorToNextGroup"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+d",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.closeTestPeek",
                "workbench.action.focusActiveEditorGroup"
            ]
        },
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+cmd+a ctrl+cmd+j",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.view.testing.focus",
                "test-explorer.focus",
                "workbench.action.focusActiveEditorGroup",
                "workbench.action.closeAuxiliaryBar"
		// cursor
                // "aichat.close-sidebar",
            ],
            "interval": 10,
        },
        // "when": "editorTextFocus"
    },

    {
        "key": "cmd+f1",
        "command": "multiCommand.continue_custom",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "cmd+f1",
        "command": "-editor.action.showAccessibilityHelp"
    },
    {
        "key": "ctrl+b",
        "command": "-extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+b",
        "command": "extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl"
    },
    {
        "key": "ctrl+f",
        "command": "-extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+f",
        "command": "extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+space",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights && vim.mode == 'Normal'"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.wordHighlight.prev",
        // "when": "editorTextFocus && hasWordHighlights && vim.mode == 'Normal'"
        "when": "editorTextFocus && hasWordHighlights && !inlineSuggestionVisible"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+k",
        "command": "editor.action.insertSnippet"
        // "command": "insertSnippet",
    },
    {
        "key": "ctrl+u",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
    },

    // grep finder
    {
        // C/C++ Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--clang -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },
    {
        // C/C++ Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --clang"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },
    {
        // shell script Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--sh -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(sh|bash|zsh)/ || editorLangId =~ /^shellscript$/)",
    },
    {
        // shell script Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --sh "
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(sh|bash|zsh)/ || editorLangId =~ /^shellscript$/)",
    },
    {
        // python Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--py -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(py|python)/ || editorLangId =~ /^python$/)",
    },
    {
        // python Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --py "
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(py|python)/ || editorLangId =~ /^python$/)",
    },
    {
        // java Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--java -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(java|class)/ || editorLangId =~ /^java$/)",
    },
    {
        // java Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --java "
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(java|class)/ || editorLangId =~ /^java$/)",
    },
    {
        // javascript Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--js -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(js)/ || editorLangId =~ /^javascript$/)",
    },
    {
        // javascript Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --js "
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(js)/ || editorLangId =~ /^javascript$/)",
    },
    {
        // php Normal
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Normal_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "--php -- '\\b"
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Normal",
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(php)/ || editorLangId =~ /^php$/)",
    },
    {
        // php Visual
        "key": "ctrl+shift+1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "multiCommand.fzfgrepff_Visual_start",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "-f --php "
                    }
                },
                "multiCommand.FzfGrepKeyword_ender_Visual"
            ],
            "interval": 80
        },
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(php)/ || editorLangId =~ /^php$/)",
    },
    {
        "key": "cmd+shift+1",
        // "command": "multiCommand.cppGrepKeyword_Normal",
        "command": "multiCommand.allGrepKeyword_Normal",
        // "when": "resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/"
        // "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal'"
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },
    {
        "key": "cmd+shift+1",
        // "command": "multiCommand.cppGrepKeyword_Visual",
        "command": "multiCommand.allGrepKeyword_Visual",
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },
    {
        "key": "ctrl+shift+cmd+1",
        "command": "multiCommand.cppGrepKeyword_Normal",
        // "when": "resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/"
        // "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal'"
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },
    {
        "key": "ctrl+shift+cmd+1",
        "command": "multiCommand.cppGrepKeyword_Visual",
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Visual' && (resourceExtname =~ /\\.(c|cpp|h|y)/ || editorLangId =~ /^c$|^cpp$/)",
    },

    // cmd + f find widget
    {
        "key": "ctrl+m",
        "command": "multiCommand.SelectionFindFocus",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "enter",
        "command": "multiCommand.FindNext",
        "when": "editorFocus && findWidgetVisible && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "enter",
        "command": "multiCommand.FindNextinFindInput",
        // "when": "editorFocus && findInputFocussed"
        "when": "findInputFocussed && findWidgetVisible && !replaceInputBoxFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    // {
    //     "key": "ctrl+n",
    //     // "command": "editor.action.nextMatchFindAction",
    //     "command": "multiCommand.FindNext",
    //     // "when": "editorFocus && findInputFocussed"
    //     "when": "editorFocus && findWidgetVisible && vim.active && vim.mode == 'Normal'"
    // },
    // {
    //     "key": "ctrl+n",
    //     // "command": "editor.action.nextMatchFindAction",
    //     "command": "multiCommand.FindNextinFindInput",
    //     "when": "editorFocus && findInputFocussed"
    // },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "shift+enter",
        "command": "multiCommand.FindPrev",
        // "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findWidgetVisible && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "shift+enter",
        "command": "multiCommand.FindPrevinFindInput",
        // "when": "editorFocus && findInputFocussed"
        "when": "findInputFocussed && findWidgetVisible"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.nextMatchFindAction",
        // "command": "editor.action.previousMatchFindAction",
        "when": "findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "cmd+enter",
        // "command": "editor.action.nextMatchFindAction",
        "command": "editor.action.previousMatchFindAction",
        "when": "findWidgetVisible && replaceInputFocussed"
    },
    // {
    //     "key": "cmd+n",
    //     "command": "multiCommand.FindPrev",
    //     // "command": "editor.action.previousMatchFindAction",
    //     "when": "editorFocus && findWidgetVisible && vim.active && vim.mode == 'Normal'"
    // },
    // {
    //     "key": "cmd+n",
    //     // "command": "editor.action.previousMatchFindAction",
    //     "command": "multiCommand.FindPrevinFindInput",
    //     "when": "editorFocus && findInputFocussed"
    // },
    {
        "key": "escape",
        "command": "multiCommand.FindFocusTrans",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+oem_1",
        "command": "multiCommand.FindFocusTrans",
        "when": "editorFocus && findInputFocussed"
    },


    {
        "key": "delete",
        "command": "-notebook.cell.delete",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+backspace",
        "command": "notebook.cell.delete",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_4",
        "command": "notebook.cell.insertMarkdownCellBelow",
        "when": "notebookCellListFocused"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_6",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused"
    },
    {
        "key": "alt+cmd+c",
        "command": "copyFilePath",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+c",
        "command": "-copyFilePath",
        "when": "editorFocus"
    },
    {
        "key": "cmd+i",
        "command": "editor.action.openLink",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+cmd+i",
        "command": "workbench.action.terminal.openDetectedLink"
    },
    {
        "key": "shift+cmd+u",
        "command": "-extension.updateSettings"
    },



    {
        "key": "cmd+w",
        "command": "workbench.action.closeActiveEditor",
        // "command": "workbench.action.terminal.kill",
        // "when": "panelFocus && terminalFocus"
        "when": "(terminalEditorFocus && terminalFindFocused) || (terminalEditorFocus && terminalFocus)"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.kill",
        "when": "(!terminalEditorFocus && terminalFindFocused && terminalProcessSupported) || (!terminalEditorFocus && terminalFocus && terminalProcessSupported)"
        // "when": "panelFocus && terminalFocus"
        // "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        // 터미널인 경우 ctrl + k 명령어가 먹힐 수 있도록 함
        "key": "ctrl+k",
        "command": "",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    // 첫번째 diff 내용 select
    {
        "key": "ctrl+cmd+d ctrl+cmd+i",
        "command": "meld-diff.diffFromFileListSelect"
    },
    // 두번째 diff 내용 select 및 비교
    {
        "key": "ctrl+cmd+d ctrl+cmd+o",
        "command": "meld-diff.diffFromFileList"
    },
    // 현재 파일을 클립보드의 내용과 비교
    {
        "key": "ctrl+cmd+d ctrl+cmd+u",
        "command": "meld-diff.diffWithClipboard"
    },
    // svn, git 내용과 비교
    {
        "key": "ctrl+cmd+d ctrl+cmd+p",
        "command": "multiCommand.diff_head",
    },
    {
        "key": "shift+cmd+i",
        "command": "workbench.action.showAllSymbols",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+i",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+i",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+x",
        "command": "multiCommand.SelectionAddLog",
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Normal'"
    },
    // {
    //     "key": "ctrl+cmd+d ctrl+cmd+x",
    //     "command": "editor.action.insertLineAfter",
    //     "when": "editorTextFocus && !editorReadonly"
    // },
    {
        "key": "ctrl+shift+cmd+n",
        "command": "workbench.action.newWindow",
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+g",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    // {
    //     "key": "ctrl+cmd+f7",
    //     "command": "workbench.action.problems.focus"
    // },
    {
        "key": "ctrl+shift+n",
        "command": "editor.action.sourceAction"
        // "command": "editor.action.quickFix",
        // "command": "workbench.actions.view.problems",
        // "command": "workbench.action.problems.focus"
        // "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+n",
        "command": "editor.action.quickFix",
        // "command": "workbench.actions.view.problems",
        // "command": "workbench.action.problems.focus"
        // "when": "workbench.panel.markers.view.active"
        "when": "editorTextFocus && editorHasCodeActions && vim.active && (vim.mode == 'Normal' || vim.mode == 'Visual')"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+cmd+r",
        // "command": "workbench.actions.view.problems",
        "command": "workbench.action.problems.focus"
        // "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+cmd+r",
        // "command": "workbench.action.problems.focus"
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+c",
        "command": "hexdump.copyAsFormat",
        "when": "editorLangId == 'hexdump'"
    },
    {
        "key": "ctrl+cmd+c",
        "command": "-hexdump.copyAsFormat",
        "when": "editorLangId == 'hexdump'"
    },
    {
        "key": "shift+cmd+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "shift+alt+cmd+n",
        "command": "Notes.listNotes",
    },
    {
        "key": "shift+cmd+y",
        "command": "dashboard.open"
    },
    // {
    //     "key": "shift+cmd+y",
    //     "command": "notes.focus"
    // },
    // {
    //     "key": "shift+cmd+y",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     "when": "sideBarFocus && activeViewlet == 'workbench.view.extension.vscode-notes'"
    // },
    {
        "key": "alt+cmd+n",
        "command": "Notes.newNote"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        // "when": "activePanel == 'workbench.panel.markers.view' && panelFocus"
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+h",
        "command": "list.collapse",
        "when": "focusedView == 'workbench.panel.markers.view' || listFocus"
    },
    {
        "key": "ctrl+cmd+h",
        "command": "list.collapseAll",
        "when": "focusedView == 'workbench.panel.markers.view' || listFocus"
    },
    {
        "key": "ctrl+n",
        "command": "list.toggleExpand",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+cmd+j",
        "command": "list.focusDown",
        // "when": "activePanel == 'workbench.panel.markers.view' && panelFocus"
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "list.focusUp",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+cmd+h",
        "command": "list.collapse",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+shift+cmd+oem_5",
        "command": "-jupyter.selectCell",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_1",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_1",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+shift+oem_1",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+shift+oem_1",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "shift+cmd+oem_1",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_3",
        "command": "saveAll"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_plus",
        "command": "workbench.scm.action.setTreeViewMode",
        // Developer: Inspect Context Keys
        // Developer: Toggle Developer Tools
        "when": "scmViewModelMode == 'list'"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+oem_plus",
        "command": "workbench.scm.action.setListViewMode",
        "when": "scmViewModelMode == 'tree'"
    },
    {
        "key": "shift+cmd+d shift+cmd+c",
        "command": "rest-client.copy-request-as-curl",
        "when": "editorTextFocus && resourceExtname == '.http'"
    },
    {
        "key": "shift+cmd+d shift+cmd+p",
        "command": "workbench.action.files.openLocalFile",
        "when": "remoteConnectionState == 'connected'"
        // "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+shift+cmd+t",
        "command": "revealFileInOS",
        "when": "resource =~ /^file:\/\/.*/ || resource =~ /^vscode-userdata:\/.*/ || remoteConnectionState != 'connected'"
    },
    {
        "key": "ctrl+cmd+k",
        "command": "-bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "escape",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
    },
    {
        "key": "cmd+oem_2",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "ctrl+oem_7",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "shift+cmd+oem_7",
        "command": "workbench.action.keepEditor"
    },
    // {
    //     "key": "cmd+oem_7",
    //     "command": "workbench.action.keepEditor"
    // },
    {
        // "key": "shift+cmd+oem_7",
        "key": "cmd+oem_7",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        // "key": "shift+cmd+oem_7",
        "key": "cmd+oem_7",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },


    // {
    //     "key": "cmd+oem_2",
    //     "command": "manpages.openFromInput"
    // },
    {
        "key": "shift+cmd+d shift+cmd+h",
        "command": "vim.remap",
        "when": "editorTextFocus && vim.mode == 'Normal'",
        "args": {
            "after": [":", "!", " ", "w", "s", "l", " ",
                    "-", "e", " ", "z", "s", "h", " ", "-", "c", " " ]
        }
    },
    {
        "key": "shift+cmd+d shift+cmd+g",
        "command": "vim.remap",
        "when": "editorTextFocus && vim.mode == 'Normal'",
        "args": {
            "after": [":", "r", "!", " ", "w", "s", "l", " ",
                    "-", "e", " ", "z", "s", "h", " ", "-", "c", " " ]
        }
    },
    // beyond compare 생성
    {
        "key": "shift+cmd+d shift+cmd+t",
        "command": "vim.remap",
        "when": "editorTextFocus && vim.mode == 'Normal'",
        "args": {
            "after": [":", "r", "!", " ", "w", "s", "l", " ", "-", "e", " ", "z", "s", "h", " ", "-", "c", " ", "\"",
                "/", "m","n", "t", "/", "c", "/", "P", "r", "o", "g", "r", "a", "m", "\\", " ", "F", "i", "l", "e", "s", "/",
                "B", "e", "y", "o", "n", "d", "\\", " ", "C", "o", "m", "p", "a", "r", "e", "\\", " ", "4", "/",
                "B", "C", "o", "m", "p", ".", "e", "x", "e", "\"", "CR" ]
        }
    },




    // "command": "rest-client.history"
    // run in terminal
    // tasks.json
    // curl http request command
    {
        "key": "shift+cmd+d shift+cmd+i",
        // "command": "extension.partialDiff.markSection1",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "extension.partialDiff.markSection1",
                "extension.vim_escape"
            ],
            "interval": 50
        },
        "when": "editorFocus && editorTextFocus && editorHasSelection && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "shift+cmd+d shift+cmd+o",
        "command": "extension.partialDiff.markSection2AndTakeDiff",
        "when": "editorFocus && editorTextFocus && editorHasSelection"
    },

    {
        "key": "shift+cmd+d shift+cmd+oem_1",
        "command": "workbench.action.tasks.runTask",
        "args": "curl_tp_2"
    },
    {
        "key": "shift+cmd+d shift+cmd+j",
        "command": "workbench.action.tasks.runTask",
        "args": "curl_rv_1"
    },
    {
        "key": "shift+cmd+d shift+cmd+k",
        "command": "workbench.action.tasks.runTask",
        "args": "curl_rv_2"
    },
    {
        "key": "shift+cmd+d shift+cmd+l",
        "command": "workbench.action.tasks.runTask",
        "args": "curl_rv_3"
    },
    {
        "key": "shift+cmd+d shift+cmd+a",
        // "command": "open-file-command.openFile",
        // "args": ["~/Videos/.aaa_testcurl.sh", 55, 1]
        "command": "multiCommand.openLocalFile",
    },
    {
        "key": "shift+cmd+d shift+cmd+z",
        // "command": "open-file-command.openFile",
        // "args": ["~/Videos/.aaa_testcurl.sh", 55, 1]
        "command": "multiCommand.openLocalFile_another",
    },
    {
        "key": "shift+cmd+n shift+cmd+a",
        "command": "multiCommand.openLocalFile",
    },
    {
        "key": "shift+cmd+n shift+cmd+e",
        "command": "multiCommand.openLocalFile_another",
    },
    {
        "key": "shift+cmd+n shift+cmd+r",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "open-file-command.openFile",
                    // "args": ["~/Videos/.qqq_testcurl.sh", 55, 1]
                    "args": ["~/curltest/.rrr_testcurl.sh", 55, 1]
                }
            ]
        },
    },
    {
        "key": "shift+cmd+n shift+cmd+d",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "open-file-command.openFile",
                    // "args": ["~/Videos/.qqq_testcurl.sh", 55, 1]
                    "args": ["~/curltest/.ddd_testcurl.sh", 20, 1]
                }
            ]
        },
    },
    {
        "key": "cmd+n",
        "command": "explorer.newFile",
        "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
    },
    {
        "key": "ctrl+shift+n",
        "command": "explorer.newFolder",
        "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
    },
    {
        "key": "alt+n",
        "command": "java.view.menus.file.newJavaClass",
        // "command": "java.view.package.newFile",
        // "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
    },

    {
        "key": "shift+cmd+d shift+cmd+s",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curlaa"
    },
    {
        "key": "shift+cmd+d shift+cmd+s",
        // "command": "workbench.action.tasks.runTask",
        // "args": "task_curlaa"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curlaa"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curlaa"
                }
            ]
        },
        "when": "taskRunning"
    },
    {
        "key": "shift+cmd+d shift+cmd+w",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curlqq"
    },
    {
        "key": "shift+cmd+d shift+cmd+w",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curlqq"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curlqq"
                }
            ]
        },
        "when": "taskRunning"
    },
    {
        "key": "shift+cmd+s shift+cmd+a",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curlaa"
    },
    {
        "key": "shift+cmd+s shift+cmd+a",
        // "command": "workbench.action.tasks.runTask",
        // "args": "task_curlaa"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curlaa"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curlaa"
                }
            ]
        },
        "when": "taskRunning"
    },
    {
        "key": "shift+cmd+s shift+cmd+w",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curlqq"
    },
    {
        "key": "shift+cmd+s shift+cmd+w",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curlqq"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curlqq"
                }
            ]
        },
        "when": "taskRunning"
    },
    {
        "key": "shift+cmd+s shift+cmd+d",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curldd"
    },
    {
        "key": "shift+cmd+s shift+cmd+d",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curldd"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curldd"
                }
            ]
        },
        "when": "taskRunning"
    },
    {
        "key": "shift+cmd+s shift+cmd+f",
        "command": "workbench.action.tasks.runTask",
        "args": "task_curldd"
    },
    {
        "key": "shift+cmd+s shift+cmd+f",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                {
                    "command": "workbench.action.tasks.terminate",
                    "args": "task_curldd"
                },
                {
                    "command": "workbench.action.tasks.runTask",
                    "args": "task_curldd"
                }
            ]
        },
        "when": "taskRunning"
    },


    {
        "key": "ctrl+m",
        "command": "-markdown.extension.editing.toggleMath",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+alt+cmd+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+r",
        "command": "-python.refreshTensorBoard",
        "when": "python.hasActiveTensorBoardSession"
    },
    {
        "key": "ctrl+r",
        "command": "-jupyter.refreshDataViewer",
        "when": "isWorkspaceTrusted && jupyter.dataViewerActive"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "shift+cmd+d shift+cmd+oem_4",
        "command": "workbench.userData.actions.openSyncBackupsFolder"
    },
    {
        "key": "shift+cmd+d shift+cmd+oem_6",
        "command": "workbench.userDataSync.actions.showSyncedData"
    },
    {
        "key": "ctrl+shift+cmd+'",
        "command": "editor.action.inspectTMScopes"
    },

    // copilot
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+d shift+cmd+b",
        "command": "opensshremotes.openEmptyWindow"
    },
    {
        "key": "ctrl+cmd+8",
        "command": "workbench.view.remote"
    },
    {
        "key": "ctrl+cmd+8",
        "command": "remoteTargets.focus",
        // remote container 에 있으면 ssh로 전면
        "when": "focusedView == 'targetsContainers'"
    },
    // {
    //     "key": "ctrl+cmd+8",
    //     "command": "targetsWsl.focus",
    //     // remote ssh 에 있으면 wsl로 전환
    //     "when": "focusedView == 'remoteTargets'"
    // },
    {
        "key": "ctrl+cmd+8",
        "command": "targetsContainers.focus",
        // wsl 에 있으면 containers로 전환
        // "when": "focusedView == 'targetsWsl'"
        "when": "focusedView == 'remoteTargets'"
    },
    {
        "key": "shift+cmd+b",
        "command": "continue.focusContinueInputWithoutClear",
    },

    {
        "key": "ctrl+cmd+b",
        "command": "-continue.focusContinueInput",
        "when": "editorFocus && editorTextFocus && vim.active && vim.mode == 'Visual'"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when": "focusedView == 'codegpt-sidebar' && !editorFocus"
        // "when": "focusedView == 'chatgpt-vscode.view' && panelFocus"
        // "when": "focusedView == 'continue.continueGUIView' && !editorFocus && activeViewlet == 'workbench.view.extension.continue'"
        "when": "(focusedView =~ /continue\\..*/) && (activeViewlet == 'workbench.view.extension.continue' && !editorTextFocus)"
        // "when": "focusedView == 'chatgpt-vscode.view' && !inputFocus"
    },
    // {
    //     "key": "ctrl+shift+b",
    //     "command": "continue.focusContinueInput",
    //     // "command": "chatgpt-vscode.clearConversation"
    //     // "command": "extension.multiCommand.execute",
    //     // "args": {
    //     //     "sequence": [
    //     //         "chatgpt-vscode.view.focus",
    //     //         "chatgpt-vscode.conversationView"
    //     //     ],
    //     //     "interval": 0.2
    //     // },
    // },
    {
        "key": "alt+cmd+b",
        // "command": "continue.newSession"
        "command": "continue.focusContinueInput",
        // "command": "extension.multiCommand.execute",
        // "args": {
        //     "sequence": [
        //         "continue.newSession",
        //         "continue.focusContinueInputWithoutClear"
        //     ],
        //     "interval": 100,
        // }
        // "when": "focusedView == 'continue.continueGUIView' && panelFocus"
        "when": "focusedView == 'continue.continueGUIView'"
    },
    {
        "key": "alt+cmd+b",
        // "command": "workbench.action.chat.newChat",
        // "when": "focusedView == 'workbench.panel.chat.view.copilot'",
        "command": "codeium.chatPanelView.resetViewLocation",
        "when": "codeium.chatPanelView.active && activeViewlet == 'workbench.view.extension.codeium'"
    },
    // cursor
    {
        "key": "alt+cmd+b",
        "command": "composer.createNewChat",
        "when": "focusedView == 'workbench.panel.aichat.view'"
    },
    {
        "key": "ctrl+cmd+b",

        // github copilot
        // "command": "workbench.panel.interactiveSessionSidebar.copilot",
        // "command": "workbench.panel.chatSidebar.copilot",
        // "command": "workbench.action.chat.openInSidebar",
        // "command": "workbench.panel.chat.view.copilot.focus"
        // "command": "workbench.action.chat.openInSidebar",

        // codeium
        "command": "codeium.openChatView",


        // cursor
        // "command": "workbench.panel.aichat",
        // "command": "composer.newchatfollowup",
        // "command": "workbench.panel.aichat.view.focus"
        // "command": "aichat.focuschatpaneaction",
        // "command": "aichat.close-sidebar"
    },
    {
        "key": "ctrl+cmd+b",
        "command": "workbench.action.focusActiveEditorGroup",
        // "when": "focusedView == 'workbench.panel.interactiveSession.view.copilot' && !editorFocus"


        // copilot
        // "when": "focusedView == 'workbench.panel.chat.view.copilot' && !editorFocus"
        // "when": "focusedView == 'workbench.panel.chat.view.copilot' && !editorFocus"


        //codeium
        "when": "codeium.chatPanelView.active && activeViewlet == 'workbench.view.extension.codeium' && !editorFocus && !panelFocus && inputFocus"


        // cursor
        // "command": "aichat.newchataction",
        // "command": "workbench.panel.aichat",
        // "command": "workbench.action.quickOpen",
        // "command": "notifications.clearAll",
        // "command": "workbench.action.showCommands",
        // "when": "focusedView == 'workbench.panel.aichat.view'"
    },
    {
        "key": "ctrl+shift+cmd+b",
        "command": "workbench.panel.composerViewPane2.view.focus",
    },
    {
        "key": "ctrl+shift+cmd+b",
        "command": "workbench.action.quickOpen",
        "when": "view == 'workbench.panel.composerViewPane2.view'"
    },
    {
        "key": "ctrl+shift+b",
        "command": "workbench.panel.chat.view.edits.focus"
        // "command": "workbench.panel.chat.view.copilot.focus"
    },
    {
        "key": "ctrl+shift+b",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'workbench.panel.chat.view.edits' && !editorFocus"
    },
    {
        "key": "ctrl+j",
        // "command": "inlineChat.nextFromHistory",
        "command": "cursorDown",
        "when": "inlineChatVisible && inputFocus && !editorFocus && inlineChatFocused"
    },
    {
        "key": "ctrl+k",
        // "command": "inlineChat.previousFromHistory",
        "command": "cursorUp",
        "when": "inlineChatVisible && inputFocus && !editorFocus && inlineChatFocused"
    },
    {
        "key": "cmd+backspace",
        "command": "github.copilot.chat.review.continueInInlineChat",
        "when": "inlineChatVisible && inputFocus && !editorFocus && inlineChatFocused"
    },
    {
        "key": "ctrl+cmd+h",
        // "command": "inlineChat.focus",
        // "when": "editorTextFocus && inlineChatVisible && !inlineChatFocused && !isEmbeddedDiffEditor"
        "command": "codeium.openCodeiumCommand",
        "when": "codeium.commandEnabled && editorTextFocus && !inlineSuggestionsVisible"

        // cursor
        // "command": "aipopup.action.modal.generate",
        // "when": "editorFocus && !composerBarIsVisible"
    },

    {
        "key": "alt+cmd+f",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "alt+f",
        // "command": "compare.swapComparedTabs",
        "command": "swapdiff.swapdiff"
        // "command": "extension.multiCommand.execute",
        // "args": {
        //     "sequence": [
        //         "swapdiff.swapdiff",
        //         "workbench.action.previousEditorInGroup",
        //         "workbench.action.closeActiveEditor"
        //     ]
        // },
    },
    {
        "key": "alt+cmd+f",
        "command": "multiCommand.externalDiffToolSide",
        // "when": "inDiffEditor && isInDiffEditor"
        "when": "editorTextFocus && inDiffEditor && config.diffEditor.renderSideBySide && isInDiffEditor"
    },
    {
        "key": "alt+cmd+f",
        "command": "multiCommand.externalDiffToolNoSide",
        // "when": "inDiffEditor && isInDiffEditor"
        "when": "editorTextFocus && inDiffEditor && !config.diffEditor.renderSideBySide && isInDiffEditor"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    // {
    //     "key": "alt+cmd+x",
    //     "command": "extension.pasteImage",
    //     "when": "editorTextFocus"
    // },
    {
        "key": "alt+cmd+v",
        "command": "-extension.pasteImage",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+v",
        "command": "-vscode-paste-image.pasteImage",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+v",
        "command": "vscode-paste-image.pasteImage",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+q",
        "command": "workbench.action.quit"
    },
    {
        "key": "cmd+q",
        "command": "-workbench.action.quit"
    },

    // option(alt), cmd cursor key remove
    {
        "key": "alt+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+down",
        "command": "-cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+up",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+left",
        "command": "-cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+right",
        "command": "-cursorEnd",
        "when": "textInputFocus"
    },

    // ctrl debug step
    {
        "key": "alt+a",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": []
        }
    },
    {
        "key": "alt+s",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": []
        }
    },
    {
        "key": "alt+d",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": []
        }
    },
    {
        "key": "ctrl+z",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped' && editorFocus && vim.mode == 'Normal'"
    },
    {
        "key": "alt+a",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "cmd+e",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped' && vim.mode == 'Normal'"
    },
    // {
    //     "key": "alt+cmd+z",
    //     "command": "multiCommand.continue_custom",
    //     "when": "debugState == 'stopped'"
    // },
    {
        "key": "alt+cmd+a",
        "command": "multiCommand.continue_custom",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+x",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped' && editorFocus && vim.mode == 'Normal'"
        // "when": "debugState == 'stopped' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "alt+s",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
        // "when": "debugState == 'stopped' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "ctrl+c",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive' && editorFocus && vim.mode == 'Normal'"
        // "when": "debugState != 'inactive' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "alt+d",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
        // "when": "debugState != 'inactive' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "alt+cmd+x",
        // "command": "workbench.action.debug.stepInto",
        "command": "workbench.action.debug.stepBack",
        "when": "debugState != 'inactive'"
        // "when": "debugState != 'inactive' && vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "alt+cmd+z",
        // "command": "workbench.action.debug.stepInto",
        "command": "workbench.action.debug.reverseContinue",
        "when": "debugState == 'stopped' && editorFocus && vim.mode == 'Normal'"
    },

    // debug start, stop
    // {
    //     "key": "cmd+e",
    //     "command": "multiCommand.DebugStop",
    //     "when": "inDebugMode && !focusedSessionIsAttach"
    // },
    // {
    //     "key": "cmd+e",
    //     "command": "multiCommand.DebugDisconnect",
    //     "when": "focusedSessionIsAttach && inDebugMode"
    // },
    {
        "key": "shift+cmd+e",
        "command": "multiCommand.DebugStop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+cmd+e",
        "command": "multiCommand.DebugDisconnect",
        "when": "inDebugMode && focusedSessionIsAttach"
    },
    {
        "key": "alt+cmd+e",
        "command": "multiCommand.DebugStop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "alt+cmd+e",
        "command": "multiCommand.DebugDisconnect",
        "when": "inDebugMode && focusedSessionIsAttach"
    },
    {
        "key": "alt+cmd+e",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "cmd+e",
        "command": "multiCommand.DebugStart",
        "when": "debuggersAvailable && debugState == 'inactive' && vim.mode == 'Normal'"
    },
    {
        "key": "cmd+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "ctrl+shift+e",
        // "command": "workbench.action.debug.run",
        "command": "workbench.action.debug.selectandstart",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },


    {
        "key": "cmd+k shift+cmd+1",
        "command": "-chatgpt-vscode.addTests",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+2",
        "command": "-chatgpt-vscode.findProblems",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+3",
        "command": "-chatgpt-vscode.optimize",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+4",
        "command": "-chatgpt-vscode.explain",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+5",
        "command": "-chatgpt-vscode.addComments",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+6",
        "command": "-chatgpt-vscode.completeCode",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+7",
        "command": "-chatgpt-vscode.adhoc",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+8",
        "command": "-chatgpt-vscode.customPrompt1",
        "when": "editorHasSelection"
    },
    {
        "key": "cmd+k shift+cmd+9",
        "command": "-chatgpt-vscode.customPrompt2",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+7",
        "command": "chatgpt-vscode.addTests",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+8",
        "command": "chatgpt-vscode.findProblems",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+9",
        "command": "chatgpt-vscode.optimize",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+0",
        "command": "chatgpt-vscode.explain",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+-",
        "command": "-decreaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+=",
        "command": "-increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+-",
        "command": "chatgpt-vscode.addComments",
        "when": "editorHasSelection"
    },
    {
        "key": "alt+=",
        "command": "chatgpt-vscode.completeCode",
        "when": "editorHasSelection"
    },
    // {
    //     "key": "alt+4",
    //     "command": "chatgpt-vscode.adhoc",
    //     "when": "editorHasSelection"
    // },
    // {
    //     "key": "alt+5",
    //     "command": "chatgpt-vscode.customPrompt1",
    //     "when": "editorHasSelection"
    // },
    // {
    //     "key": "alt+6",
    //     "command": "chatgpt-vscode.customPrompt2",
    //     "when": "editorHasSelection"
    // },
    {
        "key": "cmd+up",
        "command": "-interactiveSession.action.focus",
        "when": "inInteractiveInput && textInputFocus"
    },
    {
        "key": "cmd+up",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "cmd+up",
        "command": "-workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "cmd+up",
        "command": "-notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "-interactive.scrollToTop",
        "when": "resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "cmd+up",
        "command": "-interactiveEditor.previousFromHistory",
        "when": "interactiveEditorFocused && interactiveEditorHasProvider"
    },
    {
        "key": "cmd+up",
        "command": "-search.action.focusSearchFromResults",
        "when": "firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+up",
        "command": "-search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "shift+cmd+d shift+cmd+y",
        "command": "sftp.sync.remoteToLocal"
    },
    {
        "key": "shift+cmd+d shift+cmd+u",
        "command": "sftp.sync.localToRemote"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "alt+b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "shift+cmd+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+shift+cmd+0",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+shift+cmd+m",
        // "command": "gitlens.showGraph"
        // "command": "gitlens.showGraphPage"
        "command": "git-graph.view"
    },
    {
        // "key": "ctrl+shift+cmd+y",
        "key": "shift+alt+cmd+y",
        "command": "todo-tree-view.focus"
    },
    {
        "key": "shift+alt+cmd+y",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "focusedView == 'todo-tree-view'"
    },
    {
        "key": "cmd+k shift+cmd+right",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+shift+cmd+j",
        "command": "workbench.action.moveEditorLeftInGroup",
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+cmd+k",
        "command": "workbench.action.moveEditorRightInGroup",
        // "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "cmd+k shift+cmd+left",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "tab",
        "command": "-markdown.extension.onTabKey",
        "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !inlineSuggestionVisible && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
    },
    {
        "key": "shift+cmd+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+j",
        "command": "search.action.focusNextSearchResult",
        "when": "editorFocus && editorTextFocus && textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+j",
        "command": "search.action.focusNextSearchResult",
        "when": "searchViewletVisible && focusedView == 'workbench.view.search' && !inputFocus"
    },
    {
        "key": "shift+cmd+k",
        "command": "search.action.focusPreviousSearchResult",
        "when": "editorFocus && editorTextFocus && textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+k",
        "command": "search.action.focusPreviousSearchResult",
        "when": "searchViewletVisible && focusedView == 'workbench.view.search' && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "-deleteAllLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+backspace",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+cmd+2",
        "command": "editor.action.rename",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+2",
        "command": "editor.action.changeAll",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "shift+cmd+enter",
        "command": "github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+k alt+cmd+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "cmd+k cmd+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+shift+cmd+=",
        "command": "workbench.action.increaseViewHeight"
    },
    {
        "key": "ctrl+shift+cmd+-",
        "command": "workbench.action.decreaseViewHeight"
    },
    {
        "key": "ctrl+shift+cmd+]",
        "command": "workbench.action.increaseViewWidth"
    },
    {
        "key": "ctrl+shift+cmd+[",
        "command": "workbench.action.decreaseViewWidth"
    },
    {
        "key": "ctrl+shift+cmd+[",
        "command": "workbench.action.decreaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+cmd+]",
        "command": "workbench.action.increaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "cmd+[",
        // "command": "workbench.action.decreaseViewSize",
        "command": "multiCommand.decreaseViewSizes_Bar",
        "when": "!panelFocus && (sideBarFocus || auxiliaryBarFocus || (!panelFocus && terminalFocus && !terminalEditorFocus) || (!editorFocus && !panelFocus) || focusedView =~ /continue\\..*/ ||  focusedView =~ /gitlens\\.views\\..*/)"
    },
    {
        "key": "cmd+[",
        "command": "multiCommand.decreaseViewSizes_Panel",
        // "when": "panelFocus && viewLocation == 'panel'"
        "when": "panelFocus"
    },
    {
        "key": "cmd+]",
        // "command": "workbench.action.increaseViewSize",
        "command": "multiCommand.increaseViewSizes_Bar",
        "when": "!panelFocus && (sideBarFocus || auxiliaryBarFocus || (!panelFocus && terminalFocus && !terminalEditorFocus) || (!editorFocus && !panelFocus) || focusedView =~ /continue\\..*/ ||  focusedView =~ /gitlens\\.views\\..*/)"
    },
    {
        "key": "cmd+]",
        "command": "multiCommand.increaseViewSizes_Panel",
        "when": "panelFocus"
    },
    {
        "key": "cmd+[",
        // "command": "workbench.action.decreaseViewSize",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.focusPanel",
                "multiCommand.decreaseViewSizes_Panel",
                // "workbench.action.decreaseViewSize",
                "workbench.action.focusActiveEditorGroup",
                "extension.vim_escape",
            ],
            "interval": 10,
        },
        "when": "editorFocus && panelVisible && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "cmd+]",
        // "command": "workbench.action.increaseViewSize",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.focusPanel",
                "multiCommand.increaseViewSizes_Panel",
                // "workbench.action.increaseViewSize",
                "workbench.action.focusActiveEditorGroup",
                "extension.vim_escape",
            ],
            "interval": 10,
        },
        "when": "editorFocus && panelVisible && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "cmd+]",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.increaseViewWidth",
                "workbench.action.increaseViewWidth",
            ],
            "interval": 10
        },
        "when": "editorFocus && !panelVisible"
    },
    {
        "key": "cmd+[",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.decreaseViewWidth",
                "workbench.action.decreaseViewWidth"
            ],
            "interval": 10
        },
        "when": "editorFocus && !panelVisible"
    },
    {
        "key": "cmd+[",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                // "workbench.panel.chat.view.copilot.focus",
                "workbench.view.search.focus",
                "multiCommand.decreaseViewSizes_Bar",
                "continue.focusContinueInputWithoutClear",
            ],
            "interval": 3,
        },
        // "when": "focusedView =~ /continue\\..*/"
        "when": "focusedView =~ /continue\\..*/ || (activeViewlet == 'workbench.view.extension.continue' && !editorFocus)"
    },
    {
        "key": "cmd+]",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                // "workbench.panel.chat.view.copilot.focus",
                "workbench.view.search.focus",
                "multiCommand.increaseViewSizes_Bar",
                "continue.focusContinueInputWithoutClear",
            ],
            "interval": 3,
        },
        "when": "focusedView =~ /continue\\..*/ || (activeViewlet == 'workbench.view.extension.continue' && !editorFocus)"
    },
    {
        "key": "cmd+]",
        // "command": "workbench.action.increaseViewSize",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.view.search.focus",
                "multiCommand.increaseViewSizes_Bar",
                "codeium.openChatView"
            ],
            "interval": 3
        },
        "when": "codeium.chatPanelView.active && activeViewlet == 'workbench.view.extension.codeium' && !editorFocus && !panelFocus"
    },
    {
        "key": "cmd+[",
        // "command": "workbench.action.increaseViewSize",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.view.search.focus",
                "multiCommand.decreaseViewSizes_Bar",
                "codeium.openChatView"
            ],
            "interval": 3
        },
        "when": "codeium.chatPanelView.active && activeViewlet == 'workbench.view.extension.codeium' && !editorFocus && !panelFocus"
    },


    {
        "key": "alt+cmd+e",
        "command": "-rest-client.switch-environment"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-markdown-preview-enhanced.syncPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "cmd+e",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "alt+cmd+[",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+cmd+[",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "shift+cmd+d shift+cmd+=",
        "command": "logviewer.openLastChanged"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+l",
        // "command": "multiCommand.logtail_local_httpgw",
        // "command": "multiCommand.logtail_httpgw",
        // "command": "logwatcher.watchFile",
        // "args": "/monitorapp/debug/httpgw.log.COMM.*"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.focusLastEditorGroup",
                "workbench.action.createTerminalEditorSameGroup",
                // "workbench.action.createTerminalEditorSide",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "taildebug \u000A"
                    }
                },
            ],
            "interval": 300,
            // "sequence": [
            //     "workbench.action.terminal.split",
            //     {
            //         "command": "workbench.action.terminal.sendSequence",
            //         "args": {
            //             "text": "taildebug \u000A"
            //         }
            //     },
            //     "workbench.action.focusActiveEditorGroup"
            // ]
        },
        "when": "multipleEditorGroups"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+l",
        // "command": "multiCommand.logtail_local_httpgw",
        // "command": "multiCommand.logtail_httpgw",
        // "command": "logwatcher.watchFile",
        // "args": "/monitorapp/debug/httpgw.log.COMM.*"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.createTerminalEditorSide",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "taildebug \u000A"
                    }
                },
            ],
            "interval": 300,
            // "sequence": [
            //     "workbench.action.terminal.split",
            //     {
            //         "command": "workbench.action.terminal.sendSequence",
            //         "args": {
            //             "text": "taildebug \u000A"
            //         }
            //     },
            //     "workbench.action.focusActiveEditorGroup"
            // ]
        },
        "when": "!multipleEditorGroups"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+z",
        "command": "workbench.output.action.toggleAutoScroll",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "shift+cmd+d shift+cmd+x",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.terminal.split",
                // "workbench.action.terminal.newWithProfile"
                // "workbench.action.terminal.new",
                // "workbench.action.terminal.newInActiveWorkspace",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "taildebug \u000A"
                    }
                },
                "workbench.action.focusActiveEditorGroup"
            ]
        }
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+x",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                // "workbench.action.terminal.split"
                // "workbench.action.terminal.newWithProfile"
                // "workbench.action.terminal.new",
                "workbench.action.terminal.newInActiveWorkspace",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "taildebug \u000A"
                    }
                },
                "workbench.action.focusActiveEditorGroup"
            ]
        }
    },
    // {
    //     "key": "shift+cmd+w",
    //     "command": "workbench.action.terminal.sendSequence",
    //     "args": {
    //         "text": "\u0018\u0018\u0018\u0018\u0018"
    //         // "text": "rz -E -e -b"
    //     }
    // },
    // {
    //     "key": "shift+cmd+x",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "multiCommand.logtail_httpgw",
    //             "workbench.action.focusActiveEditorGroup"
    //         ],
    //         "interval": 100
    //     }
    // },
    // {
    //     "key": "shift+cmd+d shift+cmd+x",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "logwatcher.stopWatchingAll",
    //             "workbench.action.focusActiveEditorGroup"
    //         ],
    //         "interval": 100
    //     }
    // },
    // {
    //     "key": "shift+cmd+d shift+cmd+c",
    //     "command": "extension.multiCommand.execute",
    //     "args": {
    //         "sequence": [
    //             "logwatcher.stopWatching",
    //             "workbench.action.focusActiveEditorGroup"
    //         ],
    //         "interval": 100,
    //     }
    // },
    {
        "key": "shift+cmd+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "alt+3",
        "command": "git.revertSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "shift+cmd+r",
        "command": "editor.action.refactor",
        "when": "editorFocus && editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+r",
        "command": "inlineChat.regenerate",
        "when": "inlineChatHasProvider && inlineChatVisible && inputFocus && !editorFocus"
    },
    {
        "key": "alt+cmd+u",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor && !editorHasSelection"
    },
    {
        "key": "alt+cmd+u",
        "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly && !editorHasSelection"
    },
    {
        "key": "alt+cmd+u",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor && editorHasSelection"
    },
    {
        "key": "alt+cmd+u",
        "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly && editorHasSelection"
    },
    {
        "key": "cmd+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+shift+cmd+7",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "shift+cmd+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "shift+cmd+w",
        "command": "workbench.action.moveEditorToNewWindow"
    },
    {
        "key": "shift+cmd+w",
        "command": "workbench.action.restoreEditorsToMainWindow",
        "when": "isAuxiliaryEditorPart"
    },
    {
        "key": "ctrl+shift+cmd+w",
        "command": "notifications.clearAll"
    },
    {
        "key": "ctrl+shift+alt+q",
        "command": "workbench.action.closeWindow"
    },

    {
        "key": "shift+cmd+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "cmd+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && multipleEditorGroups"
    },
    {
        "key": "shift+cmd+l",
        "command": "-continue.focusContinueInputWithoutClear"
    },
    {
        "key": "cmd+l",
        "command": "-continue.focusContinueInput"
    },
    {
        "key": "alt+cmd+s",
        "command": "-saveAll"
    },
    {
        "key": "shift+cmd+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "cmd+backspace",
        "command": "-notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "notebook.cell.clearOutputs",
        "when": "notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
    },
    {
        "key": "alt+delete",
        "command": "-notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
    },
    {
        "key": "cmd+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    // {
    //     "key": "escape",
    //     "command": "notebook.cell.quitEdit",
    //     "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused && vim.active && vim.mode == 'Normal'"
    // },
    {
        "key": "shift+cmd+enter",
        "command": "notebook.execute",
        "when": "notebookCellListFocused && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "notebook.clearAllCellsOutputs",
        "when": "notebookCellListFocused && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "notebook.clearAllCellsOutputs",
        "when": "notebookCellListFocused && notebookEditorFocused && !inputFocus"
    },
    {
        "key": ";",
        "command": "vim.showQuickpickCmdLine",
        "when": "notebookCellListFocused && notebookEditorFocused && !inputFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": ":",
        "command": "vim.showQuickpickCmdLine",
        "when": "notebookCellListFocused && notebookEditorFocused && !inputFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+cmd+t",
        "command": "java.test.goToTest",
        "when": "editorFocus && editorLangId == 'java'"
    },
    {
        "key": "space",
        "command": "-filesExplorer.openFilePreserveFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "space",
        "command": "explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "cmd+down",
        "command": "-explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "ctrl+shift+y",
        // "key": "alt+cmd+y",
        "command": "dashboard.openProjectNewWindow"
    },
    {
        "key": "alt+cmd+y",
        // "key": "alt+cmd+y",
        "command": "dashboard.openProjectCurrentWindow"
    },
    {
        "key": "ctrl+shift+alt+y",
        // "key": "shift+alt+cmd+y",
        "command": "dashboard.open"
    },
    {
        "key": "alt+cmd+n",
        "command": "-continue.rejectVerticalDiffBlock"
    },
    {
        "key": "alt+cmd+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "alt+cmd+o",
        // "command": "dumpvn.searchGitHub"
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "dumpvn.searchGitHub",
                "extension.vim_escape",
            ],
            "interval": 100
        },
        "when": "editorTextFocus && textInputFocus && editorHasSelection"
    },
    {
        "key": "ctrl+alt+cmd+o",
        "command": "workbench.action.remote.showMenu"
    },
    {
        "key": "alt+cmd+o",
        "command": "-workbench.action.remote.showMenu"
    },
    {
        "key": "ctrl+shift+alt+w",
        "command": "sftp.upload.changedFiles",
        "when": "sftp.enabled"
    },
    {
        "key": "ctrl+alt+u",
        "command": "-sftp.upload.changedFiles",
        "when": "sftp.enabled"
    },
    {
        "key": "ctrl+cmd+9",
        "command": "-workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "shift+cmd+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "-addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+cmd+8",
        "command": "git.openMergeEditor"
    },
    {
        "key": "ctrl+shift+cmd+r",
        "command": "dumpvn.searchGitHub"
    },
    {
        "key": "cmd+enter",
        "command": "-mysql.mock.run",
        "when": "resourceFilename =~ /mock\\.json$/"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "mysql.runAllQuery",
        "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'"
    },
    {
        "key": "shift+cmd+enter",
        "command": "-mysql.runAllQuery",
        "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'"
    },
    {
        "key": "shift+cmd+enter",
        "command": "mysql.runSQLAsJSON",
        "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'"
    },
    {
        "key": "cmd+v",
        "command": "-extension.vim_cmd+v",
        "when": "editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+g",
        "command": "todo.toggleBox",
        "when": "editorTextFocus && vim.active && vim.mode == 'Insert' && editorLangId == 'todo'"
    },
    {
        "key": "cmd+v",
        "command": "extension.vim_ctrl+v",
        "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl"
    },
    {
        "key": "shift+alt+cmd+u",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "java.clean.workspace",
                "java.projectConfiguration.update"
            ],
            "interval": 500
        },
        // "command": "java.clean.workspace",
        // "command": "java.projectConfiguration.update",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+u",
        "command": "-java.projectConfiguration.update",
        "when": "editorFocus"
    },
    {
        "key": "cmd+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "cmd+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "shift+cmd+r",
        "command": "-continue.debugTerminal"
    },

    {
        "key": "ctrl+cmd+y",
        // "command": "vsnotes.search",
        "command": "vsnotes.listNotes"
    },
    {
        "key": "cmd+y",
        "command": "vsnotes.newNote"
    },
    {
        "key": "ctrl+shift+cmd+y",
        "command": "vsnotes.openNoteFolder"
    },
    {
        "key": "j",
        // "command": "editor.action.scrollUpHover",
        "command": "semanticdiff.nextChange",
        // "when": "activeOutputChannel =~ /extension-output-semanticdiff\\..*/",
        "when": "activeWebviewPanelId == 'SemanticDiff'",
    },
    {
        "key": "k",
        "command": "semanticdiff.previousChange",
        "when": "activeWebviewPanelId == 'SemanticDiff'",
    },
    {
        "key": "cmd+m cmd+i",
        "command": "semanticdiff.show",
        "when": "inDiffEditor && isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+i",
        "command": "semanticdiff.hide",
        "when": "activeWebviewPanelId == 'SemanticDiff'",
    },
    {
        "key": "cmd+m cmd+[",
        "command": "diffEditor.showAllUnchangedRegions",
        "when": "inDiffEditor && isInDiffEditor"
        // "when": "inDiffEditor && isInDiffEditor && config.diffEditor.hideUnchangedRegions.enabled"
    },
    {
        "key": "cmd+m cmd+]",
        "command": "diffEditor.collapseAllUnchangedRegions",
        "when": "inDiffEditor && isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+z",
        "command": "diffEditor.showAllUnchangedRegions",
        "when": "inDiffEditor && isInDiffEditor"
        // "when": "inDiffEditor && isInDiffEditor && config.diffEditor.hideUnchangedRegions.enabled"
    },
    {
        "key": "cmd+m cmd+x",
        "command": "diffEditor.collapseAllUnchangedRegions",
        "when": "inDiffEditor && isInDiffEditor"
    },
    {
        "key": "cmd+m cmd+oem_1",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "cmd+m cmd+y",
        "command": "git.stashView"
    },
    {
        "key": "cmd+m cmd+u",
        // "command": "gitlens.showQuickStashList"
        // "command": "gitlens.views.scm.grouped.stashes",
        "command": "gitlens.views.scm.grouped.stashes.detach"
        // "command": "gitlens.views.stashes.focus"
        // "command": "gitlens.showStashesView"
    },
    {
        "key": "r",
        "command": "gitlens.views.stashes.refresh",
        "when": "focusedView == 'gitlens.views.stashes'"
    },




    // edamagit magit
    {
        "key": "cmd+m cmd+e",
        "command": "magit.status",
    },
    {
        "key": "cmd+m cmd+e",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "magit.status",
                "workbench.action.focusActiveEditorGroup",
                "workbench.action.moveEditorToLeftGroup",
            ],
            "interval": 50
        },

        "when": "activeEditorGroupEmpty"
    },
    {
        "key": "cmd+m cmd+t",
        "command": "magit.commit",
    },
    {
        "key": "cmd+m cmd+t",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "magit.status",
                "workbench.action.focusActiveEditorGroup",
                "workbench.action.moveEditorToLeftGroup",
                "magit.commit",
            ],
            "interval": 50
        },
        "when": "activeEditorGroupEmpty"
    },
    {
        "key": "cmd+m cmd+o",
        "command": "magit.log-file"
    },
    {
        "key": "cmd+m cmd+q",
        "command": "magit.diffing"
    },
    {
        "key": "cmd+m cmd+q",
        "command": "magit.diff-file"
    },
    {
        "key": "g g",
        "command": "cursorTop",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "f",
        "command": "-magit.fetching"
    },
    {
        "key": "shift+f",
        "command": "-magit.pulling"
    },
    {
        "key": "l",
        "command": "-magit.logging",
    },
    {
        "key": "l",
        "command": "-magit.logging",
    },
    {
        "key": "o",
        "command": "-magit.submodules",
    },
    {
        "key": "i",
        "command": "-magit.ignoring",
    },
    {
        "key": "i",
        "command": "magit.logging",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "o",
        "command": "magit.logging",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "b",
        "command": "-magit.branching",
    },
    {
        "key": "t",
        "command": "-magit.tagging",
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point",
    },
    {
        "key": "y",
        "command": "-magit.show-refs",
    },
    {
        "key": "shift+4",
        "command": "-magit.process-log",
    },
    {
        "key": "shift+5",
        "command": "-magit.worktree",
    },
    {
        "key": "s",
        "command": "-magit.stage",
    },
    {
        "key": "a",
        "command": "-magit.apply-at-point",
    },
    {
        "key": "a",
        "command": "magit.stage",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "p",
        "command": "magit.apply-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "g",
        "command": "-magit.refresh",
    },
    {
        "key": "r",
        "command": "magit.refresh",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "r",
        "command": "-magit.rebasing",
    },
    {
        "key": "p",
        "command": "magit.rebasing",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "oem_7",
        // "key": "'",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+cmd+g",
        "command": "autoScroll.toggle"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+'",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "ctrl+cmd+d ctrl+cmd+'",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "workbench.panel.output"
    },
    {
        "key": "cmd+backspace",
        "command": "refactorPreview.discard",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "continue.edit"
    },
    {
        "key": "cmd+i",
        "command": "-continue.edit"
    },
    {
        "key": "ctrl+shift+alt+6",
        "command": "chatEditor.action.navigateNext",
        "when": "chat.hasEditorModifications && editorFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.switchWindow"
    },
    {
        "key": "cmd+o",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "editor.action.copyLinesDownAction",
                "expandLineSelection",
                // "editor.action.reindentselectedlines"
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "snippet": "${TM_SELECTED_TEXT/(DEBUG.*\\(\")/printf(\"CONSOLE | /}"
                    }
                },
                "cursorUp",
                "expandLineSelection",
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "snippet": "${TM_SELECTED_TEXT/(\",)/\\n\",/}"
                    }
                },
                "cursorUp",
                "expandLineSelection",
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "snippet": "${TM_SELECTED_TEXT/(\"\\);)/\\n\");/}"
                    }
                }
            ],
            "interval": 5
        },
        "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    },


    // codeium
    {
        "key": "alt+k",
        "command": "codeium.diffActionAccept",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    {
        "key": "alt+;",
        "command": "-codeium.diffActionAccept",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    {
        "key": "alt+j",
        "command": "codeium.diffActionReject",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    // cursor
    {
        "key": "alt+j",
        "command": "editor.action.inlineDiffs.rejectAll",
        "when": "editorTextFocus && (arbitrary function)"
    },
    // cursor
    {
        "key": "alt+k",
        "command": "editor.action.inlineDiffs.acceptAll",
        "when": "editorTextFocus && (arbitrary function)"
    },
    // cursor
    {
        "key": "alt+p",
        "command": "inlineChat.regenerate",
        "when": "editorTextFocus && (arbitrary function)"
    },
    {
        "key": "alt+r",
        "command": "-codeium.diffActionReject",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    {
        "key": "alt+r",
        "command": "codeium.diffActionFollowup",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    {
        "key": "alt+f",
        "command": "-codeium.diffActionFollowup",
        "when": "editorTextFocus && !inlineSuggestionsVisible"
    },
    {
        "key": "alt+p",
        "command": "codeium.cancelCodeiumCommand",
        "when": "codeium.commandEnabled && editorTextFocus"
    },
    {
        "key": "shift+tab",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && editorTextFocus"
    },
    {
        "key": "cmd+l",
        // "command": "codeium.forceSupercomplete",
        // "when": "!codeium.supercompleteShown && editorTextFocus",

        // "when": "editorTextFocus",

        // cursor
        "command": "editor.action.inlineSuggest.trigger",
        "when": "textInputFocus && !editorReadonly"
        // "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && vim.mode == 'Insert'"
    },
    {
        "key": "cmd+j",
        // "command": "workbench.action.previousEditor"
        "command": "editor.action.inlineSuggest.showPrevious",
        // "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && inlineSuggestionsVisible"
        // "when": "editorTextFocus && inlineSuggestionsVisible"
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+k",
        // "command": "workbench.action.nextEditor"
        "command": "editor.action.inlineSuggest.showNext",
        // "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && inlineSuggestionsVisible"
        "when": "editorTextFocus"
    },
    {
        "key": "alt+.",
        "command": "-codeium.forceSupercomplete",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+k",
        "command": "-editor.action.accessibilityHelpConfigureKeybindings",
        "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings"
    },
    {
        "key": "ctrl+/",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },


]
