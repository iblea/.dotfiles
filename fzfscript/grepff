#!/bin/bash


if [ -z "$(command -v fzf)" ]; then
    $HOME/.dotfiles/grepscript/agrepn "$@"
    eixt $?
fi
if [ -z "$(command -v code)" ]; then
    $HOME/.dotfiles/grepscript/agrepn "$@"
    exit $?
fi

CURRENT_SHELL=$(ps -p $$ -o 'comm=')

# code -s > /dev/null
# if [ $? -ne 0 ]; then
#     return
# fi

current_pwd="$(pwd)"

source $HOME/.dotfiles/grepscript/grep_exclude
search_str=( )
IFS='' search_str+=( ${exclude_str[@]} )


search_string=""
if [[ "$1" = "-f" ]]; then
    IFS='' search_str+=( "${@:2}" )
elif [[ "$1" = "-m" ]]; then
    IFS='' search_str+=( "${@:2}" )
elif [[ "$1" = "-n" ]]; then
    IFS='' search_str+=( "${@:2}" )
else
    IFS='' search_str+=( "${@}" )
fi
# echo "search_str: ${search_str[@]}"

search_string=$(echo "${search_str[${#search_str[@]}-1]}")
# echo "search_string: $search_string"

# if grep -q "zsh" <<< "$CURRENT_SHELL"; then
#     search_string=$(echo "${search_str[${#search_str[@]+1}]}")
# else
#     search_string=$(echo "${search_str[${#search_str[@]}-1]}")
# fi


# -P option : perl regex
# grep --color=always -rnIHP ${search_str[@]} | sed -e "p" -e "s/:/ | /2" | sed -n "2~2p"
# grep --color=always -rnIHP ${search_str[@]} | sed -e "s/:/ | /2" -e "s|\[m\[K\s*|[m[K|g"
# output=$(grep --color=always -rnIHP ${search_str[@]} | sed -e "s/:/ | /2")
output=""
preview_script="$HOME/.dotfiles/fzfscript/cat_n_preview.sh"
if [[ "$1" = "-f" ]]; then
    # echo "-f option"
    # output=$(grep --color=always -rnIHF ${search_str[@]} | sed -e "s/:/ | /2")
    output=$(grep --color=always -rnIHF ${search_str[@]} | sed -e "s|\:\[m\[K\s*|[m[K\n|2")
    preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
elif [[ "$1" = "-m" ]]; then
    # echo "-m option"
    # output=$(grep --color=always -rnIHF ${search_str[@]} | sed -e "s/:/ | /2")

    output=$(grep --color=always -rnIHF ${search_str[@]} | sed -e "s|\:\[m\[K\s*|[m[K\n|2")
    preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
elif [[ "$1" = "-n" ]]; then
    # echo "-n option"
    # output=$(grep --color=always -rnIHP ${search_str[@]} | sed -e "s/:/ | /2")
    output=$(grep --color=always -rnIHP ${search_str[@]} | sed -e "s|\:\[m\[K\s*|[m[K\n|2")
else
    # echo "other option"
    # output=$(grep --color=always -rnIHP ${search_str[@]} | sed -e "s/:/ | /2")
    output=$(grep --color=always -rnIHP ${search_str[@]} | sed -e "s|\:\[m\[K\s*|[m[K\n|2")
fi

if [ -z "$output" ]; then
    echo "grep result is empty"
    exit 0
fi

output_array=()
IFS=$'\n' output_array=( $(echo "$output" ) )

results=""

for (( i=0; i<${#output_array[@]}; i+=2 )); do
    if [ -z "${output_array[$i]}" ]; then
        continue
    fi
    # results+="\n${output_array[$i+1]}    | ${output_array[$i]}"
    # results+="${output_array[$i]}\n${output_array[$i+1]}\n\0"
    results+="${output_array[$i]}\n${output_array[$i+1]}\0"
    # results+="${output_array[$i]}\n${output_array[$i+1]}\0"
done

# if grep -q "zsh" <<< "$CURRENT_SHELL"; then
#     for (( i=1; i<=${#output_array[@]}; i+=2 )); do
#         if [ -z "${output_array[$i]}" ]; then
#             continue
#         fi
#         # results+="\n${output_array[$i+1]}    | ${output_array[$i]}"
#         results+="${output_array[$i]}\n${output_array[$i+1]}\n\0"
#         # results+="${output_array[$i]}\n${output_array[$i+1]}\0"
#     done
# else
#     for (( i=0; i<${#output_array[@]}; i+=2 )); do
#         if [ -z "${output_array[$i]}" ]; then
#             continue
#         fi
#         # results+="\n${output_array[$i+1]}    | ${output_array[$i]}"
#         results+="${output_array[$i]}\n${output_array[$i+1]}\n\0"
#         # results+="${output_array[$i]}\n${output_array[$i+1]}\0"
#     done
# fi

if [ -z "$results" ]; then
    echo "cannot find '$@'"
    exit 1
fi

# echo "${results}"
# results=${results:0:${#results}-4}

terminal_size=$(stty size < /dev/tty 2>/dev/null)
terminal_width=0
terminal_height=0

if [ -n "$terminal_size" ]; then
    terminal_width=$(echo $terminal_size | awk '{print $2}')
    terminal_height=$(echo $terminal_size | awk '{print $1}')
fi

preview_options="up:14" # 6
if [ $(echo "$terminal_width") -ge 200 ]; then
    preview_options="right"
else

    if [ $(echo "$terminal_height") -ge 24 ]; then
        preview_options="up:14" # 6 (6 + 6 + 1(highlight) + 1(wrap tmp len))
    elif [ $(echo "$terminal_height") -le 15 ]; then
        preview_options="up:6" # 2
    else
        # echo "11 - 10" | bc
        preview_height=$(expr ${terminal_height} - 9)
        preview_options="up:${preview_height}" # 2
    fi
fi


echo -n -e "${results}" | fzf \
    --color hl+:underline \
    -e --ansi --read0 --cycle --info=inline  \
    --marker '‚ïê' --marker-multi-line '‚ïî‚ïë‚ïö' \
    --bind "ctrl-a:half-page-up" \
    --bind "ctrl-d:half-page-down" \
    --prompt 'grepff> ' \
    --delimiter '\n' \
    --preview "${preview_script} '{1}' '$search_string'" \
    --preview-window "${preview_options},wrap" \
    --bind "enter:execute-silent(echo {1} | xargs -I{} code --goto ${current_pwd}/{})"
    # --preview-window 'up:6,wrap' \


# echo "${results}" | fzf -e --ansi --read0 --cycle --info=inline  \
#     --marker '‚ïê' --marker-multi-line '‚ïî‚ïë‚ïö' \
#     --bind "ctrl-a:half-page-up" \
#     --bind "ctrl-d:half-page-down" \
#     --bind "enter:execute-silent(echo {} | head -n 1 | xargs -I{} code --goto ${current_pwd}/{})"
#     # --bind "enter:execute-silent(echo {} | awk -F '\n' '{ print \$1 }' | xargs -I{} code --goto ${current_pwd}/{})"
#     # --bind "enter:execute-silent(echo {} | awk -F '    | ' '{print \$NF}' | xargs -I{} code --goto ${current_pwd}/{})"
#     #  | fzf -e --ansi --color=hl:#5FA392 --bind "ctrl-m:execute-silent(echo {} | cut -f -2 -d ':' | xargs code --goto)" --bind "enter:execute-silent(echo {} | cut -f -2 -d ':' | xargs code --goto)"
