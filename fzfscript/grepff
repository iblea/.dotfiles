#!/bin/bash


if [ -z "$(command -v fzf)" ]; then
    $HOME/.dotfiles/grepscript/agrepn "$@"
    eixt $?
fi

fzf_open_script="$HOME/.dotfiles/fzfscript/open_editor.sh"
fzf_execute="execute-silent"
if [ -z "$(command -v code)" ]; then
    fzf_execute="become"
fi
if [ -z "$(command -v code)" ] && [ -z "$(command -v vim)" ]; then
    $HOME/.dotfiles/grepscript/agrepn "$@"
    exit $?
fi

CURRENT_SHELL=$(ps -p $$ -o 'comm=')

# code -s > /dev/null
# if [ $? -ne 0 ]; then
#     return
# fi

findword=""
is_escape="0"
preview_script="$HOME/.dotfiles/fzfscript/cat_n_preview.sh"

args=( "$@" )
opts=( )


if [ $# -gt 0 ]; then

argslen=$(expr ${#args[@]} - 1)
for (( i=0; i<$argslen; i++ )); do
    arg="${args[$i]}"
    opts+=( "$arg" )
    if [[ "$arg" = "--" ]]; then

        # default option is -n
        if [ ${#opts[@]} -eq 1 ]; then
            opts=( "-n" "--" )
        fi

        if [ $((i+1)) -eq $# ]; then
            findword=""
        else
            findword="${args[@]:$((i+1))}"
        fi
        break
    fi
    if [[ "$arg" = "-f" ]]; then
        preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
        is_escape="1"
    elif [[ "$arg" = "-m" ]]; then
        preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
        is_escape="1"
    fi
done

if [ -z "$findword" ]; then
    findword="${args[$argslen]}"
    # if findword first character is "-", then it is option
    if [[ "${findword}" = "--" ]]; then
        findword=""
        if [ ${#opts[@]} -eq 0 ]; then
            opts=( "-n" "--" )
        else
            opts+=( "--" )
        fi
    elif [[ "${findword:0:1}" = "-" ]]; then
        if [[ "$findword" = "-f" ]]; then
            preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
            is_escape="1"
        elif [[ "$findword" = "-m" ]]; then
            preview_script="$HOME/.dotfiles/fzfscript/cat_m_preview.sh"
            is_escape="1"
        elif [[ "$findword" = "-n" ]]; then
            echo -n ""
        else
            opts+=( "-n" )
        fi
        opts+=( "$findword" )
        opts+=( "--" )
        findword=""
    else
        if [ ${#opts[@]} -eq 0 ]; then
            opts=( "-n" "--" )
        fi
    fi
fi
else
    opts=( "-n" "--" )
fi

if [ -z "$findword" ]; then
    read -p "find : " -r findword
fi


current_pwd="$(pwd)"

terminal_size=$(stty size < /dev/tty 2>/dev/null)
terminal_width=0
terminal_height=0

source "$HOME/.dotfiles/fzfscript/tty_size.sh"

if [ -n "$terminal_size" ]; then
    terminal_width=$(echo $terminal_size | awk '{print $2}')
    terminal_height=$(echo $terminal_size | awk '{print $1}')
fi

preview_options="up:14" # 6
if [ $(echo "$terminal_height") -ge $UP_HEIGHT_SIZE ]; then
    preview_options="up:16" # 6
elif [ $(echo "$terminal_width") -ge $RIGHT_WIDTH_SIZE ]; then
    preview_options="right:50%"
else

    if [ $(echo "$terminal_height") -ge $MAX_HEIGHT_SIZE ]; then
        preview_options="up:14" # 6 (6 + 6 + 1(highlight) + 1(wrap tmp len))
    elif [ $(echo "$terminal_height") -le $MIN_HEIGHT_SIZE ]; then
        preview_options="up:6" # 2
    else
        # echo "11 - 10" | bc
        preview_height=$(expr ${terminal_height} - 9)
        preview_options="up:${preview_height}" # 2
    fi
fi



# $HOME/.dotfiles/fzfscript/grepff_logic.sh
reload_script="$HOME/.dotfiles/fzfscript/grepff_logic.sh"

find_word_escape=""
if [[ "$is_escape" = "1" ]]; then
    find_word_escape=${findword//\\/\\\\}
    reload_find_word=${find_word_escape//\"/\\\"}
else
    # find_word_escape=${findword//\\/\\\\}
    find_word_escape="$findword"
    reload_find_word="$find_word_escape"
fi

if [[ "$is_argument" = "1" ]]; then
    reload_script+=" ${opts[@]} \"$reload_find_word\""
else
    reload_script+=" ${opts[@]} \"$reload_find_word\""
fi

RELOAD="reload:$reload_script"
# echo "RELOAD: $RELOAD"
# echo "findword: $findword"
# echo "find_word_escape: "$find_word_escape""
# exit 0

# $reload_script | fzf \
# result=$($HOME/.dotfiles/fzfscript/grepff_logic.sh "${opts[@]}" "${find_word_escape}")
# if [ $? -ne 0 ]; then
#     printf '%s\n' "$result"
#     exit $?
# fi
#
# # printf '%s' "$result" | fzf \
# # echo -n -e "$result" | fzf \

~/.dotfiles/fzfscript/grepff_logic.sh "${opts[@]}" "${find_word_escape}" | fzf \
    --color hl+:underline \
    -e --ansi --read0 --cycle --info=inline  \
    --marker '═' --marker-multi-line '╔║╚' \
    --bind "ctrl-r:${RELOAD}" \
    --bind "ctrl-a:half-page-up" \
    --bind "ctrl-d:half-page-down" \
    --prompt 'grepff> ' \
    --delimiter '\n' \
    --preview "${preview_script} {1} " \
    --preview-window "${preview_options},wrap" \
    --bind "enter:${fzf_execute}( echo {1} | xargs -I{} ${fzf_open_script} ${current_pwd}/{} )"


    # search_string -> memset.*' -> error
    # --preview "${preview_script} '{1}' '$search_string'" \
    # --bind "enter:execute-silent(
    #     echo {1} | xargs -I{} code --goto ${current_pwd}/{}
    # )"
    # --preview-window 'up:6,wrap' \


# echo "${results}" | fzf -e --ansi --read0 --cycle --info=inline  \
#     --marker '═' --marker-multi-line '╔║╚' \
#     --bind "ctrl-a:half-page-up" \
#     --bind "ctrl-d:half-page-down" \
#     --bind "enter:execute-silent(echo {} | head -n 1 | xargs -I{} code --goto ${current_pwd}/{})"
#     # --bind "enter:execute-silent(echo {} | awk -F '\n' '{ print \$1 }' | xargs -I{} code --goto ${current_pwd}/{})"
#     # --bind "enter:execute-silent(echo {} | awk -F '    | ' '{print \$NF}' | xargs -I{} code --goto ${current_pwd}/{})"
#     #  | fzf -e --ansi --color=hl:#5FA392 --bind "ctrl-m:execute-silent(echo {} | cut -f -2 -d ':' | xargs code --goto)" --bind "enter:execute-silent(echo {} | cut -f -2 -d ':' | xargs code --goto)"
