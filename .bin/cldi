#!/bin/bash

VIM_PROGRAM=""
MODEL_SELECT="a"

NVIM_PATH="nvim"
VIM_PATH="vim"

# If nvim command exists, set nvim as the default.
if [ -n "$(command -v $NVIM_PATH)" ]; then
    VIM_PROGRAM="n"
else
    VIM_PROGRAM="o"
fi

# VIM_DEFAULT=$(vim --version | head -n 1 | awk '{ print $1 }')
# if [ "$VIM_DEFAULT" = "NVIM" ]; then
#     VIM_PROGRAM="n"
# else
#     VIM_PROGRAM="o"
# fi


# VIM_PROGRAM -> n: neovim, o: original vim
# CLAUDE -> s: opus, a: sonnet

if [ $# -eq 0 ]; then
    # MODEL_SELECT="s"
	echo -n ""
elif [ $# -eq 1 ]; then
    if [ "$1" = "n" ] || [ "$1" = "N" ]; then
        VIM_PROGRAM="n"
    elif [ "$1" = "o" ] || [ "$1" = "O" ]; then
        VIM_PROGRAM="o"
    else
        MODEL_SELECT="$1"
    fi
    shift
else
    # first option is vim argument
    if [ "$1" = "n" ] || [ "$1" = "N" ]; then
        VIM_PROGRAM="n"
        # second option is claude argument
        if [ "$2" = "s" ] || [ "$2" = "u" ] ||  [ "$2" == "su" ] || [ "$2" == "a" ] || [ "$2" == "au" ] || [ "$2" == "h" ] || [ "$2" == "hu" ]; then
            MODEL_SELECT="$2"
            shift
        else
            # MODEL_SELECT="s"
			echo -n ""
        fi
        shift
    # first option is vim argument
    elif [ "$1" = "o" ] || [ "$1" = "O" ]; then
        VIM_PROGRAM="o"
        # second option is claude argument
        if [ "$2" = "s" ] || [ "$2" = "u" ] ||  [ "$2" == "su" ] || [ "$2" == "a" ] || [ "$2" == "au" ] || [ "$2" == "h" ] || [ "$2" == "hu" ]; then
            MODEL_SELECT="$2"
            shift
        else
            # MODEL_SELECT="s"
			echo -n ""
        fi
        shift
    #else
    else
        # first option is claude argument
        if [ "$1" = "s" ] || [ "$1" = "u" ] ||  [ "$1" == "su" ] || [ "$1" == "a" ] || [ "$1" == "au" ] || [ "$1" == "h" ] || [ "$1" == "hu" ]; then
            MODEL_SELECT="$1"
            shift
        else
            # MODEL_SELECT="s"
			echo -n ""
        fi
    fi
fi

AGENT_COMMAND="$HOME/.dotfiles/.bin/cld"

# If vim terminal is already opend
# if [ -n "$VIMTERM" ] && [ "$VIMTERM" -eq "1" ]; then
# IS_VIMTERM="$(ps -p $PPID -o comm=)"
# if [ "$IS_VIMTERM" = "vim" ] || [ "$IS_VIMTERM" = "nvim" ]; then
if [ -n "$MYVIMRC" ]; then
    "$AGENT_COMMAND" "$MODEL_SELECT" $@
    exit 0
fi

if [ "$VIM_PROGRAM" = "n" ]; then
    $NVIM_PATH -c "set nonu | set nornu | set mouse=a | set scrollback=10000 | set scrolloff=0 | execute 'nnoremap <c-o> <ESC>:call chansend(b:terminal_job_id, \"\<C-o>\")<CR>'" \
        -c "execute 'tnoremap <c-h> <LEFT>' | execute 'tnoremap <c-j> <DOWN>' | execute 'tnoremap <c-k> <UP>' | execute 'tnoremap <c-l> <RIGHT>' | execute 'tnoremap <c-z> <c-\><c-n><esc>:suspend<cr>'" \
        -c "terminal bash -c '${AGENT_COMMAND} ${MODEL_SELECT} $@; exit_code=\$?; exit \$exit_code'" \
        -c "autocmd TermClose * if v:event.status == 0 | quit | endif" \
        -c "startinsert"
else
    $VIM_PATH -c "set nonu | set nornu | set mouse=a | set termwinscroll=10000 | set scrolloff=0 | execute 'nnoremap <c-o> <ESC>:call term_sendkeys(bufnr(\"%\"), \"\<C-o>\")<CR>i<C-\><C-n>'" \
        -c "execute 'tnoremap <c-h> <LEFT>' | execute 'tnoremap <c-j> <DOWN>' | execute 'tnoremap <c-k> <UP>' | execute 'tnoremap <c-l> <RIGHT>' | execute 'tnoremap <c-z> <c-\><c-n><esc>:suspend<cr>' " \
        -c "set shell=$(which zsh | sed 's/ /\\ /g')" \
        -c "terminal ++close ++curwin ${AGENT_COMMAND} ${MODEL_SELECT} $@"
        # -c "terminal ++close ++curwin bash -c '${AGENT_COMMAND} ${MODEL_SELECT} $@'"
    echo "original vim"
fi

exit 0
