" vim command in bash
" vim -c <command>
"www.vim.org/scripts
"/usr/share/vim/vim63
"created on 2007.11.5 by jtylor

"===== 기본 변수 설정 =====
"let g:match_maps = 0
if $TERM == 'xterm-256color'
nnoremap <esc>^[ <esc>^[
endif
set bg=light
hi! Normal guibg=black guifg=#BBBBBB
set nu
set rnu
set laststatus=2    "항상 파일명 표시
set nobackup        "백업파일 만들지 않는다.
set ts=4			"탭을 4칸으로
set sw=4
set sts=4
set smartcase
set smarttab
set foldmethod=manual
set foldopen-=hor
set foldopen-=undo
set foldopen-=search
set diffopt=filler,foldcolumn:0
set noea
set scrolloff=5
set wildmenu
set fileencodings=utf-8,cp949,euc-kr
set encoding=utf-8
set langmap=ㅁa,ㅠb,ㅊc,ㅇd,ㄷe,ㄹf,ㅎg,ㅗh,ㅑi,ㅓj,ㅏk,ㅣl,ㅡm,ㅜn,ㅐo,ㅔp,ㅂq,ㄱr,ㄴs,ㅅt,ㅕu,ㅍv,ㅈw,ㅌx,ㅛy,ㅋz
set shell=/bin/bash
"set confirm

let g:open_path = getcwd()

"nvim command
function! NVIM_SET()
	if exists("*stdpath")
		set clipboard^=unnamed,unnamedplus
		set mouse=a
		cnoremap <C-Y> <C-V>
		cnoremap <C-V> <nop>
		silent! set guifont=JetBrains\ Mono\ NL:h10:cDEFAULT
		"GuiFont! Hack:h10
		silent! set guifontwide=D2Coding:h10:cDEFAULT

		if has('win64')
			let &shell='bash.exe'
			let &shellcmdflag = '-c'
		endif
		let g:python3_host_prog='C:\Python38\python.exe'
		silent execute 'cd '.$HOME
	endif
endfunction
silent! call NVIM_SET()

noremap <PageUp> <C-U>
noremap <PageDown> <C-D>

noremap <C-p> "0p
noremap gp "0P

function C_Tagfile()
set complete+=t
if version >= 800
set tags=/usr/include/.tags,/home/jhh/glibc/tags,/home/jhh/make_tags_sh/lib402.tags,/home/jhh/make_tags_sh/50.tags,/home/jhh/make_tags_sh/50gw.tags
"set tags=/usr/include/tags,/home/jhh/glibc/tags,/home/jhh/make_tags_sh/lib406.tags,/home/jhh/make_tags_sh/swg40.tags,/home/jhh/make_tags_sh/swg40gw.tags
else
set tags=/usr/include/tags,/home/jhh/glibc/tags,/home/jhh/make_tags_sh/lib3.tags,/home/jhh/make_tags_sh/41.tags,/home/jhh/make_tags_sh/41gw.tags
endif
endfunction

function PY_Tagfile()
set complete+=t
set tags=/usr/lib/python3.6/tags,/usr/lib/python3/tags,/usr/local/lib/python3.6/tags
endfunction

function Default_Tagfile()
set complete+=t
set tags=tags,../tags,../../tags,../../../tags
endfunction

function Non_Tagfile()
set complete-=t
set tags=
endfunction


let g:default_search_word = '\<@@@@@@@@=@=@=@=@@@@@@@@\>'

function! Get_visual_selection()
	" Why is this not a built-in Vim script function?!
	let [lnum1, col1] = getpos("'<")[1:2]
	let [lnum2, col2] = getpos("'>")[1:2]
	let lines = getline(lnum1, lnum2)
	let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
	let lines[0] = lines[0][col1 - 1:]
	return join(lines, "\n")
endfunction

function ChangeWE()
	noremap w e
	noremap W E
	noremap e w
	noremap E W
endfunction
"call ChangeWE()


noremap s <nop>
noremap S <nop>
let mapleader='s'
noremap \ <nop>
map S s



"검색 시 대소문자 무시 검색
"set ignorecase
"/\c단어
set incsearch
set hlsearch
"set nomagic 시 정규식 대신 일반문자열로 인식하여 찾음
set magic
"set clipboard=unnamed

let g:indent=0
func! IndentT()
	if g:indent == 0
		"set ci
		set cindent
		"set ai
		set autoindent
		"set si
		set smartindent
		filetype plugin indent on
		let g:indent=1
	else
		set nocindent
		set noautoindent
		set nosmartindent
		filetype plugin indent off
		let g:indent=0
	endif
endfunc

call IndentT()
" set copyindent

"set title       "제목에 파일명 표시
" Remove in GVim or vscodevim
set lazyredraw
set ruler
set showmatch
set showmode

if ! exists("*stdpath")
	set term=xterm-256color
	set t_Co=256
endif
set notitle

" 라인 저장

"============== 주석 매크로 ==============

func! CmtOn()    "주석 on
	exe "'<,'>norm i//"
endfunc

func! CmtOff()    "주석 off
	exe "'<,'>norm 2x"
endfunc



set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
"set colorcolumn=80

if filereadable("./cscope.out")
	cs add cscope.out
else
	cs add /sniper/web-admin/cscope.out
endif
set csverb


" terminal
set splitbelow
set splitright

if exists(":term")
	"set termsize=20x0
	"set termwinsize=20x0
	func! SPterm()
		:term
		call feedkeys("\<c-w>\<c-p>\<c-w>\=5\<c-w>+", 'n')
	endfunc
	func! VSterm_cw()
		vert term
		call feedkeys("\<c-w>\<c-p>\<c-w>\=30\<c-w>>", 'n')
	endfunc
	func! VSterm()
		vert term
		silent call feedkeys("cd ".g:open_path."\<CR>")
	endfunc

	nnoremap <silent> <c-n><c-y> <ESC>:silent call SPterm()<CR>
	nnoremap <silent> <c-n><c-t> <ESC>:silent call VSterm_cw()<CR>
	nnoremap <silent> \t <ESC>:silent call VSterm()<CR>
	tnoremap <C-@> <ESC>
	tnoremap <c-g> <c-f>
	tnoremap <c-f> <c-w><c-w>
	tnoremap <c-k> <c-\><c-n>
	tnoremap <c-x> <c-\><c-n>
	tnoremap <c-j> <c-w><c-p>
	tnoremap <c-l> <c-\><c-n><ESC>:suspend<CR>
endif




"Plugin Settings
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

function! InsertTabWrapper()
	let col = col('.') - 1 
	if !col || getline('.')[col-1]!~'\k'
		return "\<TAB>"
	else
		if pumvisible()
			return "\<C-N>"
		else
			return "\<C-N>\<C-P>"
		end 
	endif
endfunction

function! InsertSTabWrapper()
	let col = col('.') - 1 
	if !col || getline('.')[col-1]!~'\k'
		return "\<TAB>"
	else
		if pumvisible()
			return "\<C-P>"
		else
			return "\<C-P>\<C-N>"
		end 
	endif
endfunction

"gdb function
let g:gdb_break_path = "break.gdb"

function! Show_Break(fileline)
	let l:gdb_path = $HOME
	" if !empty(glob(getcwd()."/".g:gdb_break_path))
	" 	let l:gdb_path = getcwd()
	" elseif !empty(glob(g:open_path."/".g:gdb_break_path))
	" 	let l:gdb_path = g:open_path
	" endif
	" if l:gdb_path == ""
	" 	return 0
	" endif

	" let l:cur_file = expand('%:p')
	" let l:cwd_file = substitute(l:cur_file, l:gdb_path."/", "", "")
	let l:cwd_file = expand('%:p')

	if a:fileline > 0
		let l:break_cmd = "break ".l:cwd_file.":".a:fileline
	else
		let l:break_cmd = "break ".l:cwd_file.":.*"
	endif
	let l:break_file = l:gdb_path."/".g:gdb_break_path
	execute 'tabnew' l:break_file
	execute 'sort u'
	execute 'w'
	let l:search_gdbfile = match(readfile(l:break_file), l:break_cmd."$")
	if l:search_gdbfile < 0
		call cursor(line('$'), 1)
	else
		call cursor(l:search_gdbfile + 1, 1)
	endif
	return 1
endfunction

function! Add_Break()
	let l:gdb_path = $HOME
	" if !empty(glob(getcwd()."/".g:gdb_break_path))
	" 	let l:gdb_path = getcwd()
	" elseif !empty(glob(g:open_path."/".g:gdb_break_path))
	" 	let l:gdb_path = g:open_path
	" endif
	" if l:gdb_path == ""
	" 	return 0
	" endif

	" let l:cur_file = expand('%:p')
	" let l:cwd_file = substitute(l:cur_file, l:gdb_path."/", "", "")
	let l:cwd_file = expand('%:p')

	let l:break_cmd = "break ".l:cwd_file.":".line('.')
	let l:break_file = l:gdb_path."/".g:gdb_break_path
	let l:search_gdbfile = match(readfile(l:break_file), l:break_cmd."$")
	if l:search_gdbfile < 0
		call writefile([l:break_cmd], l:break_file, "a")
	else
		call Show_Break(line('.'))
	endif

	echo "break add success"
	return 1
endfunction

noremap <silent> \n <ESC>:call Show_Break(0)<CR>
noremap <silent> \b <ESC>:call Add_Break()<CR>


hi Pmenu ctermbg=yellow ctermfg=black guibg=yellow guifg=black
hi PmenuSel ctermbg=darkgrey ctermfg=lightgrey guibg=darkgrey ctermfg=lightgrey
hi PmenuSbar ctermbg=grey guibg=grey

" Acp
if !empty(glob($HOME."/.vim/plugin/acp.vim"))
	let g:acp_enableAtStartup = 1
	let g:acp_mappingDriven = 0 
	let g:acp_completeOption = '.,w,b,u,i'
	set complete-=t
	let g:acp_behaviorKeywordLength = 3
endif

if isdirectory($HOME."/.vim/pack/deoplete")
	if !empty(glob($HOME."/.vim/plugin/acp.vim"))
		let g:acp_enableAtStartup = 0
	endif
	let g:deoplete#enable_at_startup = 1
	set completeopt+=noselect
	set complete+=t

	if !empty(glob($HOME."/.vim/pack/deoplete/start/deoplete/plugin/echodoc.vim"))
		set cmdheight=2
		let g:echodoc_enable_at_startup = 1
		let g:echodoc#type = 'popup'
		" To use a custom highlight for the popup window,
		" change Pmenu to your highlight group
		highlight link EchoDocPopup Pmenu
	else
		let g:echodoc_enable_at_startup = 0
		set cmdheight=1
	endif
endif


"call CocAction('toggleExtension', 'coc-tag')
" func OnCocTag()
" if isdirectory($HOME."/.vim/pack/coc")
" 	call CocAction('activeExtension', 'coc-tag')
" endif
" endfunc
" 
" func OffCocTag()
" if isdirectory($HOME."/.vim/pack/coc")
" 	call CocAction('deactivateExtension', 'coc-tag')
" endif
" endfunc
" 
" if isdirectory($HOME."/.vim/pack/coc")
" 	let g:acp_enableAtStartup = 0
" 	let g:coc_start_at_startup = 0
" 	let g:coc_disable_startup_warning = 0
" 
" 	if !has('win64')
" 		let g:coc_node_path = $HOME.'/node/bin/node'
" 	endif
" 
" 	" inoremap <silent><expr> <TAB>
" 	"       \ pumvisible() ? "\<C-n>" :
" 	"       \ <SID>check_back_space() ? "\<TAB>" :
" 	"       \ coc#refresh()
" 	" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" 	inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" 	inoremap <s-tab> <c-r>=InsertSTabWrapper()<cr>
" else
" 	inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" 	inoremap <s-tab> <c-r>=InsertSTabWrapper()<cr>
" endif

let g:acp_enableAtStartup = 1
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-r>=InsertSTabWrapper()<cr>


" Find Word
" 오름차순 1,2,3,4,5
func! N_find_word_asc()
	let l:toplinenum=winsaveview().topline
	call feedkeys("*N\<ESC>:call winrestview({'topline' : ".l:toplinenum."})\<CR>:\<BS>", 'n')
	let @/ = '\<'.expand('<cword>').'\>'
endfunc

" 내림차순 5,4,3,2,1
func! N_find_word_desc()
	let l:toplinenum=winsaveview().topline
	call feedkeys("#N\<ESC>:call winrestview({'topline' : ".l:toplinenum."})\<CR>:\<BS>", 'n')
	let @/ = '\<'.expand('<cword>').'\>'
endfunc

func! V_find_word_asc()
	let l:newWord = Get_visual_selection()
	let l:newWord = substitute(l:newWord, "\\", "\\\\\\\\", "g")
	let @/ = l:newWord
endfunc


"nnoremap <silent> # <ESC>:call N_find_word_asc()<CR>
"vnoremap <silent> # <ESC>:call V_find_word_asc()<CR>
nnoremap <silent> # <ESC>*Nzz
vnoremap <silent> # <ESC>*Nzz

" Highlights
if !empty(glob($HOME."/.vim/plugin/highlights.vim")) && version >= 800
	let g:HighlightingCommands = 1
	nnoremap <Leader>t @
	nnoremap * <ESC>:call Find_word_asc()<CR>
	nnoremap <Leader>t @
	" nnoremap <silent> c  <ESC>:call N_find_word_asc()<CR>
	" vnoremap <silent> c <ESC>:call V_find_word_asc()<CR>
	" nnoremap <silent> C  <ESC>:call N_find_word_asc()<CR>
	" vnoremap <silent> C <ESC>:call V_find_word_asc()<CR>
	nnoremap <silent> * <ESC>:call N_find_word_desc()<CR>
else
	" nnoremap # *N
	" nnoremap # <ESC>:call Find_word_asc()<CR>
	" nnoremap * <ESC>:call Find_word_desc()<CR>
	nnoremap <Leader>t @
	nnoremap @ f
	nnoremap <silent> c  <ESC>:call N_find_word_asc()<CR>
	vnoremap <silent> c <ESC>:call V_find_word_asc()<CR>
	nnoremap <silent> C  <ESC>:call N_find_word_asc()<CR>
	vnoremap <silent> C <ESC>:call V_find_word_asc()<CR>
	nnoremap <silent> * <ESC>:call N_find_word_desc()<CR>
endif

"syntastic
if isdirectory($HOME."/.vim/pack/syntastic")
	"let g:syntastic_shell = "/bin/bash"
	"let &shell = "/bin/bash"
	let &shellcmdflag = '-c'
	let &shellpipe = '2>&1| tee'
	let &shellredir = '2>&1| tee'
	let g:syntastic_python_python_exec = "/usr/bin/python3.6"
	let g:syntastic_python_checkers = ['flake8', 'python']
	let g:syntastic_python_flake8_post_args="--max-line-length=100 --ignore=E301,E302,E303,E501, W503"
	let g:syntastic_c_compiler = 'gcc'
	let g:syntastic_c_checkers = ['gcc', 'cppcheck']
	let g:syntastic_c_cppcheck_post_args="--enable=all --std=c11 --suppress=missingIncludeSystem -I /home/src/path/to/1 -I /home/src/path/to/1 --verbose ./"
	let g:syntastic_c_compiler_options = "-std=c11 -Wall"
	" setting 1
	let g:syntastic_always_populate_loc_list = 0
	let g:syntastic_aggregate_errors = 0
	let g:syntastic_check_on_open = 0
	" setting 0
	let g:syntastic_auto_loc_list = 0
	let g:syntastic_check_on_wq = 0

	let g:loctoggle = 0
	func! ToggleLoc()
		if g:loctoggle == 0
			silent! lopen
			let g:loctoggle = 1
			silent! call feedkeys("\<C-W>p")
		else
			silent! lclose
			let g:loctoggle = 0
		endif
	endfunc

	nnoremap <Leader>' :silent! call ToggleLoc()<CR>
endif

"furret
if isdirectory($HOME."/.vim/pack/ferret")
	let g:FerretLoaded = 0
	let g:FerretMap = 0
endif

"sneak
if isdirectory($HOME."/.vim/pack/sneak")
	let g:loaded_sneak_plugin = 1
endif


"gitgutter
if isdirectory($HOME."/.vim/pack/gitgutter")
	let g:gitgutter_enabled = 1
	highlight! link SignColumn LineNr
	" GitGutterLineNrHighlightsEnable
	" GitGutterLineHighlightsEnable

	let g:gitgutter_map_keys = 0
	nmap <buffer> <Leader>c <Plug>(GitGutterPreviewHunk)
endif

func! Gitgutter_Highlighting()
	if g:gitgutter_enabled == 1
		let g:gitgutter_sign_allow_clobber = 1
		let g:gitgutter_set_sign_backgrounds = 1

		highlight GitGutterAdd    guifg=#009900 ctermfg=2
		highlight GitGutterChange guifg=#bbbb00 ctermfg=3
		highlight GitGutterDelete guifg=#ff2222 ctermfg=1
	endif	
endfunc

"scratch
if isdirectory($HOME."/.vim/pack/scratch")
	let g:scratch_top = 0
	let g:scratch_height = 12
endif

"bufonly
if isdirectory($HOME."/.vim/pack/bufonly")
	nmap \c <ESC>:BOnly<CR>
endif


"fold key
nnoremap ,f zF
vnoremap ,f zF
nnoremap <Leader>f zF
vnoremap <Leader>f zF
nnoremap ,i za
vnoremap ,i za
nnoremap ,o zA
vnoremap ,o zA
nnoremap <Leader>o zA
vnoremap <Leader>o zA
nnoremap ,u zd
vnoremap ,u zd
nnoremap ,U zD
vnoremap ,U zD
nnoremap <Leader>e zd
vnoremap <Leader>e zd
nnoremap <Leader>E zD
vnoremap <Leader>E zD
nnoremap ,q v]}zf
vnoremap ,q v]}zf
nnoremap ,w v}zf
vnoremap ,w v}zf

"SVN
if isdirectory($HOME."/.vim/pack/svnj")
	nnoremap \d :SVNDiff<CR>
	nnoremap \l :SVNLog<CR>
endif

" Airline
if isdirectory($HOME."/.vim/pack/airline")
	" 버퍼 목록 켜기
	let g:airline#extensions#tabline#enabled = 1
	" 파일명만 출력
	let g:airline#extensions#tabline#fnamemod = ':t'
	" powerline 폰트가 없는 경우 아래를 uncomment
	" let g:airline#extensions#tabline#left_sep = ' '
	" let g:airline#extensions#tabline#left_alt_sep = '|'

	let g:airline_theme='luna'
	let g:airline_powerline_fonts = 1
	let g:svnj_warn_branch_log=0
	"let g:airline_highlighting_cache=1

	" Airline BufExp
	let g:miniBufExplMapWindowNavVim = 1
	let g:miniBufExplMapWindowNavArrows = 1
	let g:miniBufExplMapCTabSwitchBufs = 1
	let g:miniBufExplModSelTarget = 1

endif

" TagHighlight
if ! exists('g:TagHighlightSettings')
	let g:TagHighlightSettings = {}
	" let g:TagHighlightSettings['TagFileName'] = 'tags'
endif
"ExtensionLanguageOverrides
"FileTypeLanguageOverrides
"SyntaxLanguageOverrides
"LanguageDetectionMethods
" let g:TagHighlightSettings['ExtensionLanguageOverrides'] = {
" 	\ 'y': 'c'
" 	\ }

"NerdTree
if isdirectory($HOME."/.vim/pack/NERDTree")
	let NERDTreeWinPos="right"
	let NERDTreeShowHidden=1
	"let NERDTreeAutoDeleteBuffer=1
endif

"ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
if isdirectory($HOME."/.vim/pack/ctrlp")
	let g:ctrlp_map='<Leader>k'
	"let g:ctrlp_cmd='CtrlP'
	"let g:ctrlp_working_path_mode='ra'
	let g:ctrlp_working_path_mode='ca'
	let g:ctrlp_cmd='CtrlP :pwd'
	let g:ctrlp_show_hidden=1
	"ignore gitignore directory
	"let g:ctrlp_user_command=['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
	"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|svn'
	let g:ctrlp_custom_ignore={
				\ 'dir': '\v[\/]\.(git|hg|svn)$',
				\ 'file': '\v\.(pyc|so|dll|o)$',
				\ }
endif

"yoink
if isdirectory($HOME."/.vim/pack/yoink")
	if isdirectory($HOME."/.vim/pack/ctrlp")
		let g:yoinkInitialized = 1
	endif
endif

"indentguides
if isdirectory($HOME."/.vim/pack/indent-guides")
	let g:indent_guides_auto_colors = 0
	"let g:indent_guides_color_change_percent = 10
	"let g:indent_guides_guide_size = 1
	let g:indent_guides_start_level = 2
	let g:indent_guides_enable_on_vim_startup = 1
endif



" TagList
if isdirectory($HOME."/.vim/pack/taglist")
	let Tlist_Use_Right_Window=0
endif

"emmet
if isdirectory($HOME."/.vim/pack/emmet")
	let g:user_emmet_mode='i'
	let g:user_emmet_leader_key=','
	let g:user_emmet_install_global = 0
	autocmd FileType html,css,php EmmetInstall
endif

"autopair
if isdirectory($HOME."/.vim/pack/autopair")
	"let g:AutoPairs={}
	"let g:AutoPairs={'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''"}
	let g:AutoPairsFlyMode = 0
	let g:AutoPairsMultilineClose = 0
	let g:AutoPairsMapCh = 0
	let g:AutoPairsCenterLine = 0
	let g:AutoPairsShortcutToggle= '<M-t>'
endif


"===== 펑션키 설정 =====
"===== key map =====

" C-Space in Windows or GVim

noremap <C-@> <ESC>
nnoremap <C-@> <ESC>
inoremap <C-@> <ESC>
vnoremap <C-@> <ESC>
snoremap <C-@> <ESC>
onoremap <C-@> <ESC>
xnoremap <C-@> <ESC>
lnoremap <C-@> <ESC>
cnoremap <C-@> <C-C>

inoremap <C-J> <DOWN>
inoremap <C-K> <UP>
inoremap <C-L> <RIGHT>
inoremap <C-H> <LEFT>
inoremap <C-N> <BS>
"inoremap <C-F> <C-P>
xnoremap <C-J> <DOWN>
xnoremap <C-K> <UP>
xnoremap <C-L> <RIGHT>
xnoremap <C-H> <LEFT>
xnoremap <C-N> <BS>
snoremap <C-J> <DOWN>
snoremap <C-K> <UP>
snoremap <C-L> <RIGHT>
snoremap <C-H> <LEFT>
snoremap <C-N> <BS>
onoremap <C-J> <DOWN>
onoremap <C-K> <UP>
onoremap <C-L> <RIGHT>
onoremap <C-H> <LEFT>
onoremap <C-N> <BS>
cnoremap <C-J> <DOWN>
cnoremap <C-K> <UP>
cnoremap <C-L> <RIGHT>
cnoremap <C-H> <LEFT>
cnoremap <C-F> <BS>

nnoremap ; :
vnoremap ; :


func! Togglehlsearch()
	if &hlsearch == 1
		set nohlsearch
	else
		set hlsearch
	endif
endfunc


nnoremap - ^

" 오름차순 1,2,3,4,5
"nnoremap # *N
nnoremap ' `
vnoremap ' `
nnoremap ` '
vnoremap ` '
noremap <c-n><c-k> ~
noremap _ <c-x>
noremap + <c-a>

"noremap <c-n><c-j> <c-x>
"noremap <c-n><c-l> <c-a>

func! Prev_window()
	let l:curnr=winnr()
	if l:curnr==1
		let l:curnr=winnr('$')
	else
		let l:curnr=l:curnr-1
	endif
	execute l:curnr." wincmd w"
endfunc

nnoremap t ge
nnoremap T gE
vnoremap t ge
vnoremap T gE
nnoremap f <C-W><C-W>
nnoremap <C-F> <C-W><C-W>
nnoremap F <ESC>:call Prev_window()<CR> 

nnoremap <Leader>q <ESC>:silent! set noscrollbind<CR>:silent! set nocursorbind<CR>
nnoremap <Leader>z :TlistToggle<CR>
nnoremap <Leader>g <C-W>-
vnoremap <Leader>g <C-W>-
nnoremap <Leader>h <C-W>+
vnoremap <Leader>h <C-W>+
nnoremap <Leader>, <C-w><
vnoremap <Leader>, <C-w><
nnoremap <Leader>. <C-w>>
vnoremap <Leader>. <C-w>>
nnoremap <Leader>v <C-W>=
vnoremap <Leader>v <C-W>=
nnoremap <Leader>d =<CR>
vnoremap <Leader>d =
nnoremap <Leader>; K
vnoremap <Leader>; K
nnoremap <Leader>j gT
nnoremap <Leader>l gt
"nnoremap <Leader>r <c-w>K
"nnoremap <Leader>t <c-w>H
nnoremap <Leader>p <ESC>:sp<CR>

nnoremap <Leader>n :bp<CR>
nnoremap <Leader>m :bn<CR>
nnoremap <Leader>b <ESC>:ToggleBufExplorer<CR> "파일탐색기
nnoremap <Leader>u <ESC>:call EditVar()<CR> "파일탐색기
"nnoremap <Leader>m <ESC>:call EditPWDVar()<CR> "파일탐색기
nnoremap <Leader><Space> :call NewtabFunc()<CR>

nnoremap <Leader>r <ESC>:call Replace_search_keyword()<CR>

function! Replace_search_keyword()
	if @/ == g:default_search_word
		return
	endif
	let target_word = @/

	let repl_word = input("replace : ")
	let repl_word = substitute(repl_word, "\\", "\\\\\\\\", "g")
	let repl_word = substitute(repl_word, "\\#", "\\\\#", "g")

	if target_word[0] == '\' && target_word[1] == '<'
		"let target_word = target_word[:len(target_word) - 3]
		"let target_word = target_word[2:]
		let target_word = substitute(target_word, "\\#", "\\\\#", "g")
		call feedkeys(":%s#".target_word."#".repl_word."#",'n')
	else
		let target_word = substitute(target_word, "\\#", "\\\\#", "g")
		call feedkeys(":%sno#".target_word."#".repl_word."#",'n')
	endif
	" call feedkeys(":%sno^".target_word."^^g\<LEFT>\<LEFT>",'n')
endfunction

func NewtabFunc()
	try
		let l:toplinenum=winsaveview().topline
		let l:linenum=line('.')
		let l:cursornum=col('.')
		"l:toplinenum=l:toplinenum+float2nr(round(l:linediff/2))+1
		tabnew %
		call cursor(l:linenum, l:cursornum)
		call winrestview({'topline': l:toplinenum})
	catch
		tabnew
	endtry
endfunc

nnoremap <c-g> <c-f>
nnoremap <c-c> <c-y>
nnoremap <c-a> <c-u>
nnoremap <Leader>y :call Togglehlsearch()<CR>
nnoremap <silent><c-u> :call AutoTabsTags()<CR>
nnoremap <silent><c-y> :call SetCursor()<CR>
func! AutoTabsTags()
	if &modified == 0
		silent! set more
	else
		silent! set more
		let l:curfile=expand('%')
		let l:winsize=winnr('$')
		let l:curwinnum=winnr()
		let l:circuit=1
		let l:isfile=0
		while l:circuit < l:winsize
			execute 'wincmd w'
			if l:isfile == 0
				let l:winfile=expand('%')
				if l:winfile == l:curfile
					let l:isfile=1
					break
				endif
			endif
			let l:circuit+=1
		endwhile
		execute l:curwinnum.' wincmd w'
		if l:isfile == 0
			silent! call NewtabFunc()
		endif
	endif
	call feedkeys("\<C-]>")
endfunc

func! SetCursor()
	try
		wincmd p
		let l:filepath=expand('%:p')
		let l:toplinenum=winsaveview().topline
		let l:linenum=line('.')
		let l:cursornum=col('.')
		wincmd p
		execute 'edit' l:filepath
		call cursor(l:linenum, l:cursornum)
		call winrestview({'topline': l:toplinenum})
	catch
	endtry
endfunc

nmap <Tab>q ^
nmap <Tab>w %
nmap <Tab>e $
nmap <Tab>r 0
nmap <Tab>3 $h
vmap <Tab>q ^
vmap <Tab>w %
vmap <Tab>e $
vmap <Tab>r 0
vmap <Tab>3 $h

func! EditVar()
	"let l:tmpbuflenago=len(getbufinfo({'buflisted':1}))
	"let l:tmpbuflenago=len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
	let filep=expand('%:p:h')
	:execute 'edit' filep
	"let l:tmpbuflenafter=len(getbufinfo({'buflisted':1}))
	"let l:tmpbuflenafter=len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
	"if l:tmpbuflenago != l:tmpbuflenafter
	"	:execute 'bw ' filep
	"endif
	set nu
	set rnu
endfunc

func! EditPWDVar()
	"let l:tmpbuflenago=len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
	let filep=getcwd()
	:execute 'edit' filep
	"let l:tmpbuflenafter=len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
	"if l:tmpbuflenago != l:tmpbuflenafter
	"	:execute 'bw ' filep
	"endif
	set nu
	set rnu
endfunc



nnoremap <C-D> 10<C-E>
nnoremap <C-A> 10<C-Y>
vnoremap <C-D> 10<C-E>
vnoremap <C-A> 10<C-Y>

" nnoremap <C-Z> <C-D>
" nnoremap <C-X> <C-U>
" vnoremap <C-Z> <C-D>
" vnoremap <C-X> <C-U>

"long line setting
"key map : gq
func! Longline()
	if &textwidth == 0
		set textwidth=80
		set fo+=t
	else
		set textwidth=0
		set fo-=t
	endif
endfunc


"map <F1> :Explore<CR>       "파일탐색기
nnoremap <F1> <ESC>:call EditVar()<CR> "파일탐색기
nnoremap <c-n><c-z> <ESC>:NERDTreeToggle<CR>   "새창 열기(sp)
nnoremap <F4> <ESC>:ToggleBufExplorer<CR>
" 태그탐색기는 ctrl+l
" 문서 새로고침
nnoremap <F5> <ESC>:e!<CR>
nnoremap <F8> :call Longline()<CR>
"vim -c :UpdateTypesFileOnly -c :q
nnoremap <c-n><c-i> <ESC>:UpdateTypesFileOnly<CR>
nnoremap <c-n><c-o> <ESC>:ReadTypes<CR>
nnoremap <c-n><c-b> <ESC>:set filetype=diff<CR>
":call SrcHighlighting()<CR>
nnoremap <c-k> H 
nnoremap <c-j> L
nnoremap <c-h> M<CR>
nnoremap <c-l> :suspend<CR>
nnoremap <c-n><c-h> :call ToggleMouse()<CR>
command! -nargs=* ToggleMouse call ToggleMouse()
nnoremap <c-n><c-n> <ESC>:set nu!<CR>
nnoremap <c-n><c-m> <ESC>:set rnu!<CR>

set previewheight=16
func! Pts()
	set more
	let l:st=expand("<cword>")
	if !exists(":Scratch")
		exe "ptag ".l:st
		exe 'wincmd p'
		set nopreviewwindow
		exe 'wincmd p'
		AirlineRefresh
	else
		let l:filen=expand('%')
		let l:linenum=line('.')
		let l:cursornum=col('.')
		let l:curnr=winnr()
		if winnr('$') > 1
			let l:curnr=winnr()
			exe "10 wincmd j"
			if winnr() == l:curnr
				Scratch
				resize 16
			endif
		else
			Scratch
			resize 16
		endif
		exe 'edit ' l:filen
		call cursor(l:linenum, l:cursornum)
		exe "ta ".l:st
		if line('.') == l:linenum && col('.') == l:cursornum && expand('%') == l:filen
			quit
		endif
		exe l:curnr."wincmd w"
		AirlineRefresh
	endif
endfunc
func! Ptsi()
	set nomore
	let l:st=expand("<cword>")
	exe "ptj ".l:st
endfunc

func! VirtualTags()
	let l:win_nr=winnr('$')
	if l:win_nr == 1
		execute 'vs'
	else
		let l:cur_winnr=winnr()
		execute 'wincmd l'
		let l:move_winnr=winnr()
		if l:cur_winnr==l:move_winnr
			execute 'wincmd h'
			let l:move_winnr=winnr()
			if l:cur_winnr==l:move_winnr
				" horizontal split
				execute 'vs'
			else
				if &modified == 1
					execute 'wincmd l'
					call NewtabFunc()
				else
					call SetCursor()
				endif
			endif
		else
			if &modified == 1
				execute 'wincmd h'
				call NewtabFunc()
			else
				call SetCursor()
			endif
		endif
	endif
endfunc

func! HorizonTags()
	let l:win_nr=winnr('$')
	if l:win_nr == 1
		execute 'sp'
	else
		let l:cur_winnr=winnr()
		execute 'wincmd j'
		let l:move_winnr=winnr()
		if l:cur_winnr==l:move_winnr
			execute 'wincmd k'
			let l:move_winnr=winnr()
			if l:cur_winnr==l:move_winnr
				" horizontal split
				execute 'sp'
			else
				if &pvw == 1
					execute l:cur_winnr.'wincmd w'
					execute 'sp'
				endif
				if &modified == 1
					execute l:cur_winnr.'wincmd w'
					call NewtabFunc()
				else
					call SetCursor()
				endif
			endif
		else
			if &pvw == 1
				execute l:cur_winnr.'wincmd w'
				execute 'sp'
			endif
			if &modified == 1
				execute l:cur_winnr.'wincmd w'
				call NewtabFunc()
			else
				call SetCursor()
			endif
		endif
	endif
endfunc

"echo winheight(0)
nnoremap <c-n><c-f> <ESC>:call VirtualTags()<CR><C-]>
nnoremap <c-n><c-d> <ESC>:call HorizonTags()<CR><C-]>
nnoremap <c-n><c-v> <ESC>:call NewtabFunc()<CR><C-]>
nnoremap <c-n><c-c> <ESC>:call Pts()<CR>
nnoremap <c-n><c-x> <ESC>:call HorizonTags()<CR>16<C-W>_<C-]>
"nnoremap _ :ptn<CR>
"nnoremap + :ptp<CR>


nnoremap <c-n>. <ESC><C-W>H
nnoremap <c-n>, <ESC><C-W>K<C-W>=

nnoremap U K 
nnoremap H <C-W><C-H> 
nnoremap J <C-W><C-J>
nnoremap K <C-W><C-K>
nnoremap L <C-W><C-L>

inoremap <c-a> <ESC>^i
inoremap <c-d> <ESC>$a
"imap <c-f> <ESC>0i
inoremap <c-w> <ESC><right>wi
"imap <c-e> <ESC>ea
inoremap <c-b> <ESC>bi
"imap <c-v> <ESC>gea
inoremap <c-f> <Del>
inoremap <c-z> <ESC><c-e>a
inoremap <c-x> <ESC><c-y>a
inoremap <c-y> <ESC>"0pa
inoremap <c-p> <ESC>pa
inoremap <c-o> <ESC>o
inoremap <c-u> <ESC>O
vmap <c-f> ge
inoremap <F1> <ESC>:AcpEnable<CR>a
inoremap <F2> <ESC>:AcpDisable<CR>a
inoremap <F3> <ESC>:call IndentT()<CR>a
set pastetoggle=<c-n><c-p>
inoremap <F7> <ESC>:ptn<CR>a
inoremap <F8> <ESC>:ptp<CR>a
inoremap <F10> <ESC>:call WebChangeType()<CR>a

func! WebChangeType()
	if &ft == "php"
		set ft=html
	elseif &ft == "html"
		set ft=php
	endif
endfunc

function! ToggleMouse()
	" check mouse is enable
	if &mouse == 'a'
		" disable mouse
		set mouse-=a
	else
		" enable mouse everywhere
		set mouse=a
	endif
endfunc

func! Writevssrcfunccword()
	let l:filestring = expand("<cword>")
	let l:cwd = getcwd()
	:vnew
	:exe 'r! find '.l:cwd.' -name "*" -type f -exec grep -Hn --color "\<'.l:filestring.'\>" {} \;'
	:silent %g/Binary file/d
	:silent %g/\/types_.*\.taghl:/d
	:silent %g/\/taghl_config.txt:/d
	:silent %g/\/tags:/d
	:silent %g/\/.*\.tags:/d
	:silent %g/\/.*\.ctags:/d
	:silent %s/:\t\t*/:/e
	:silent %s/: \s*/:/e
	:silent %s/\(.*:\d*:\)/\1\t/e
	:set filetype=tags
endfunc

let g:v_search_flag = 0
func! Writespsrcfunccword(search_flag)
	let l:filestring = expand("<cword>")
	if a:search_flag == 0
		let g:v_search_flag = 0
		let l:cwd = g:open_path
	else
		let g:v_search_flag = 1
		let l:cwd = getcwd()
	endif

	let l:filestring = expand("<cword>")
	if !exists(":Scratch")
		:12 new
	else
		:Scratch
		:set nu
		:set rnu
		:%d
	endif
	:exe 'r! find '.l:cwd.' -name "*" -type f -exec grep -Hn --color "\<'.l:filestring.'\>" {} \;'

	let l:is_magic = 1
	if &magic == "nomagic"
		let l:is_magic = 0
		set magic
	endif
	:silent %g/Binary file/d
	:silent %g/\/types_.*\.taghl:/d
	:silent %g/\/taghl_config.txt:/d
	:silent %g/\/tags:/d
	:silent %g/\/.*\.tags:/d
	:silent %g/\/.*\.ctags:/d
	:silent %s/:\t\t*/:/e
	:silent %s/: \s*/:/e
	:silent %s/\(.*:\d*:\)/\1\t/e
	:set filetype=tags
	if l:is_magic == 0
		set nomagic
	endif
	call feedkeys("gg\<C-W>p")
endfunc

func! Entervssrcfunccword()
	" let l:filename = expand('%')
	let l:filepath = expand('<cWORD>')

	" current path
	let l:cur_path = ""
	if l:filepath[0] == '.'
		if l:filepath[1] == '.'
			if g:v_search_flag == 0
				let l:cur_path = g:open_path
			else
				let l:cur_path = getcwd()
			endif
			try
				let l:cur_path = split(l:cur_path, "/")
				let l:cur_path = join(l:cur_path[:-2], "/")
				let l:cur_path = "/".l:cur_path
			catch
				echom "path parse error1"
				return 0
			endtry
			let l:filepath = substitute(l:filepath, "..", l:cur_path, "")
		else
			if g:v_search_flag == 0
				let l:cur_path = g:open_path
			else
				let l:cur_path = getcwd()
			endif
			let l:filepath = substitute(l:filepath, ".", l:cur_path, "")
		endif
	elseif l:filepath[0] != '/'
		return 0
	endif

	if l:filepath[len(l:filepath)-1] == ':'
		let l:filepath = l:filepath[:-2]
	endif
	let l:file_info = []
	try
		let l:file_info = split(l:filepath, ":")
	catch
	endtry
	try
		if len(l:file_info) < 1
			echom "cannot find file name"
			return 0
		elseif len(l:file_info) < 2
			call add(l:file_info, 1)
		endif
		if !empty(glob(l:file_info[0]))
			let tabcount = tabpagenr('$')
			execute 'tabnew' l:file_info[0]
			if tabcount == tabpagenr('$')
				execute 'tabnew' l:file_info[0]
			endif
			call cursor(l:file_info[1], 1)
			return 1
		else
			echom "cannot access file/dir ".l:file_info[0]
			return 0
		endif
	catch
		echom "cannot move to file "
	endtry
endfunc


" if !exists(":Diffsrc")
" 	command Diffsrc vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
" endif
"cnoreabbrev ss sh
"ca WQ q


nnoremap <silent> <c-n><c-a> <ESC>:call Entervssrcfunccword()<CR>
nnoremap <silent> <c-n><c-w> <ESC>*N:call Writevssrcfunccword()<CR>gg
nnoremap <silent> <c-n><c-e> <ESC>*N:call Writespsrcfunccword(0)<CR>gg
nnoremap <silent> <c-n><c-r> <ESC>*N:call Writespsrcfunccword(1)<CR>gg
nnoremap <silent> <c-n><c-g> <ESC>:ScratchPreview<CR>

"set path=
"
"===== man page 설정 =====

" 파일 인코딩을 한국어로
if $LANG[0]=='k' && $LANG[1]=='o'
	set fileencoding=korea
endif

syntax enable
" 구문 강조 사용
if has("syntax")
	syntax on
endif

" Gvim in colorscheme
"colorscheme slate

"set bg=dark
"colorscheme jellybeans

let g:colors_name = "default"

func! Set_Color_C_Scheme()
	if g:colors_name != "bandit"
		"let g:TagHighlightSettings['UserLibraries']=['/home/glibc/types_c.taghl','/usr/include/types_c.taghl']
		set bg=dark
		colorscheme jellybeans
		colorscheme bandit
		highlight! link SignColumn LineNr
		call Gitgutter_Highlighting()
	endif
endfunc
func! Set_Color_YACC_Scheme()
	if g:colors_name != "bandit"
		set bg=dark
		colorscheme jellybeans
		colorscheme bandit
		highlight! link SignColumn LineNr
		call Gitgutter_Highlighting()
	endif
	set filetype=c
	ReadTypes
endfunc
func! Set_Color_WEB_Scheme()
endfunc
func! Set_Color_JS_Scheme()
	let g:jsx_ext_required = 0
	"let g:javascript_plugin_jsdoc = 1
	if g:colors_name != "bandit"
		colorscheme jellybeans
		colorscheme bandit
		highlight! link SignColumn LineNr
		call Gitgutter_Highlighting()
	endif
	"jsx
endfunc
func! Set_Color_PY_Scheme()
	if g:colors_name != "bandit"
		set bg=dark
		let g:python_highlight_all = 1
		colorscheme jellybeans
		colorscheme bandit
		execute 'Python3Syntax'
		highlight! link SignColumn LineNr
		call Gitgutter_Highlighting()
		silent call feedkeys("\<ESC>:ReadTypes\<CR>", 'n')
	endif
	"highlight LineNr ctermfg=yellow ctermbg=black
	set et
endfunc
func! SetBufReadAll()
	silent! loadview
	silent! set noscrollbind
	silent! set nocursorbind 
	silent! bw *NERD_tree*
	set ts=4

	if &ft == "c"
				\ || &ft == "cpp"
				\ || &ft == "h"
				\ || &ft == "hpp"
				\ || &ft == "lex"
		call Set_Color_C_Scheme()
	elseif &ft == "yacc"
		call Set_Color_YACC_Scheme()
	elseif &ft == "html"
				\ || &ft == "htm"
				\ || &ft == "php"
				\ || &ft == "css"
		call Set_Color_WEB_Scheme()
	elseif &ft == "javascript.jsx"
				\ || &ft == "javascript"
		call Set_Color_JS_Scheme()
	elseif &ft == "py"
				\ || &ft == "python"
		call Set_Color_PY_Scheme()
	elseif &ft == "nerdtree"
				\ || &ft == "netrw"
		call EditVar()
	elseif &ft == "sh"
				\ || &ft == "dosbatch"
				\ || &ft == "groovy"
		colorscheme jellybeans
	elseif &diff == 1
				\ || &ft == "diff"
		colorscheme jellybeans
	else
		highlight! link SignColumn LineNr
	endif
	" let g:acp_completeOption = '.,w,b,u,t,i'

	if exists(":AirlineRefresh")
		execute "AirlineRefresh"
	endif

	highlight! WildMenu ctermfg=0 ctermbg=36 guifg=#ffffff guibg=#005252
	highlight! StatusLine ctermfg=231 ctermbg=23 guifg=#ffffff guibg=#002b2b cterm=NONE
	hi! Search term=reverse cterm=NONE ctermfg=0 ctermbg=184 gui=NONE guifg=#000000 guibg=#d7d700
	silent execute 'cd' expand('%:p:h')
	silent call feedkeys(":redraws\<CR>:\<BS>", 'n')
endfunc

func! SetNewFileAll()
	if exists(":AirlineRefresh")
		execute "AirlineRefresh"
	endif
	let l:expandpath = expand('%:p:h')
	if l:expandpath[0] == '/'
		silent execute 'cd' expand('%:p:h')
		silent call feedkeys(":redraws\<CR>:\<BS>", 'n')
	endif

endfunc

func! SetBufWriteAll()
	set foldcolumn=0
	set foldmethod=manual
	set nodiff
	set nopreviewwindow
	mkview
endfunc
func! DeopleteSet()
	let @/ = ""
	if exists("g:deoplete#enable_at_startup") && g:deoplete#enable_at_startup == 1
		call deoplete#custom#option({
					\ 'deoplete-options-ignore_case': v:true,
					\ 'ignore_sources': {'_': ['tag'], 'c':  [], 'cpp': [], 'python': []}
					\ })
	endif
endfunc

func! HighlightCustomize()
	hi IndentGuidesOdd  guibg=red   ctermbg=232
	"hi! Search term=reverse ctermfg=0 ctermbg=184 guifg=#000000 guibg=#d7d700
endfunc

func! WinEnterFunction()
	silent! execute 'cd' expand('%:p:h')
	if &ft == "c"
				\ || &ft == "cpp"
				\ || &ft == "h"
				\ || &ft == "hpp"
				\ || &ft == "lex"
				\ || &ft == "yacc"
		call C_Tagfile()
	elseif &ft == "py"
				\ || &ft == "python"
		call PY_Tagfile()
	elseif &ft == ""
		call C_Tagfile()
	else
		call Non_Tagfile()
	endif
	" set scroll=10
endfunc

"augroup filetype
"	au! VimEnter * call DeopleteSet()
"	au! BufRead * call SetBufReadAll()
"	au! BufNewFile * call SetNewFileAll()
"	au! BufWritePost * call SetBufWriteAll()
"augroup END

" 라인 저장 cursor save
if has("autocmd")
	au VimEnter * call DeopleteSet()
	au BufRead * call SetBufReadAll()
	au BufNewFile * call SetNewFileAll()
	au BufWritePost * call SetBufWriteAll()
	au VimEnter,Colorscheme * call HighlightCustomize()
	au VimEnter,Colorscheme * if g:colors_name != "jellybeans" | exe "hi! IndentGuidesEven guibg=#121212 ctermbg=233" | else | exe "hi! IndentGuidesEven guibg=#262626 ctermbg=235" |endif
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	au BufWinEnter,WinEnter * call WinEnterFunction()
endif
